
disp1602_menu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ac4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001c4c  08001c4c  00011c4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001ca4  08001ca4  00011ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001cac  08001cac  00011cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001cb0  08001cb0  00011cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000002c  20000000  08001cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
  8 .bss          000000f4  2000002c  2000002c  0002002c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000120  20000120  0002002c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00011d65  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002adc  00000000  00000000  00031dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002cff  00000000  00000000  0003489d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000750  00000000  00000000  000375a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007c0  00000000  00000000  00037cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004640  00000000  00000000  000384b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000029cb  00000000  00000000  0003caf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003f4bb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000011fc  00000000  00000000  0003f538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001c34 	.word	0x08001c34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	08001c34 	.word	0x08001c34

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <lcd_init>:
#include "main.h"
#include "lcd_interface.h"

void lcd_init()
{
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004de:	4801      	ldr	r0, [pc, #4]	; (80004e4 <lcd_init+0xc>)
 80004e0:	f000 bf9c 	b.w	800141c <HAL_GPIO_WritePin>
 80004e4:	40020800 	.word	0x40020800

080004e8 <lcd_write>:
}

void lcd_write(uint8_t c)
{
 80004e8:	b570      	push	{r4, r5, r6, lr}
	// para escrever dados, RS_pin = 1
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 1);
 80004ea:	4e24      	ldr	r6, [pc, #144]	; (800057c <lcd_write+0x94>)

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (c & 0x01) > 0 ? 1 : 0);
 80004ec:	4c24      	ldr	r4, [pc, #144]	; (8000580 <lcd_write+0x98>)
{
 80004ee:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	4630      	mov	r0, r6
 80004f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f8:	f000 ff90 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (c & 0x01) > 0 ? 1 : 0);
 80004fc:	f005 0201 	and.w	r2, r5, #1
 8000500:	4620      	mov	r0, r4
 8000502:	2101      	movs	r1, #1
 8000504:	f000 ff8a 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (c & 0x02) > 0 ? 1 : 0);
 8000508:	f3c5 0240 	ubfx	r2, r5, #1, #1
 800050c:	4620      	mov	r0, r4
 800050e:	2102      	movs	r1, #2
 8000510:	f000 ff84 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (c & 0x04) > 0 ? 1 : 0);
 8000514:	f3c5 0280 	ubfx	r2, r5, #2, #1
 8000518:	4620      	mov	r0, r4
 800051a:	2104      	movs	r1, #4
 800051c:	f000 ff7e 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (c & 0x08) > 0 ? 1 : 0);
 8000520:	f3c5 02c0 	ubfx	r2, r5, #3, #1
 8000524:	4620      	mov	r0, r4
 8000526:	2108      	movs	r1, #8
 8000528:	f000 ff78 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_GPIO_Port, DB4_Pin, (c & 0x10) > 0 ? 1 : 0);
 800052c:	f3c5 1200 	ubfx	r2, r5, #4, #1
 8000530:	4620      	mov	r0, r4
 8000532:	2110      	movs	r1, #16
 8000534:	f000 ff72 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port, DB5_Pin, (c & 0x20) > 0 ? 1 : 0);
 8000538:	f3c5 1240 	ubfx	r2, r5, #5, #1
 800053c:	4620      	mov	r0, r4
 800053e:	2120      	movs	r1, #32
 8000540:	f000 ff6c 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, (c & 0x40) > 0 ? 1 : 0);
 8000544:	f3c5 1280 	ubfx	r2, r5, #6, #1
 8000548:	4620      	mov	r0, r4
 800054a:	2140      	movs	r1, #64	; 0x40
 800054c:	f000 ff66 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, (c & 0x80) > 0 ? 1 : 0);
 8000550:	09ea      	lsrs	r2, r5, #7
 8000552:	4620      	mov	r0, r4
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	f000 ff61 	bl	800141c <HAL_GPIO_WritePin>

	// pulso no enable, para pegar a informacao nos pinos
	// precisaria de 43us no enable
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 1);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000560:	4630      	mov	r0, r6
 8000562:	f000 ff5b 	bl	800141c <HAL_GPIO_WritePin>
	HAL_Delay(2); // usaremos 1mili por enquanto
 8000566:	2002      	movs	r0, #2
 8000568:	f000 fc0a 	bl	8000d80 <HAL_Delay>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 800056c:	4630      	mov	r0, r6
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 8000574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 8000578:	f000 bf50 	b.w	800141c <HAL_GPIO_WritePin>
 800057c:	40020800 	.word	0x40020800
 8000580:	40020c00 	.word	0x40020c00

08000584 <lcd_cmd_write>:

void lcd_cmd_write(uint8_t c)
{
 8000584:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 0);
 8000586:	4e24      	ldr	r6, [pc, #144]	; (8000618 <lcd_cmd_write+0x94>)

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (c & 0x01) > 0 ? 1 : 0);
 8000588:	4c24      	ldr	r4, [pc, #144]	; (800061c <lcd_cmd_write+0x98>)
{
 800058a:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	4630      	mov	r0, r6
 8000590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000594:	f000 ff42 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (c & 0x01) > 0 ? 1 : 0);
 8000598:	f005 0201 	and.w	r2, r5, #1
 800059c:	4620      	mov	r0, r4
 800059e:	2101      	movs	r1, #1
 80005a0:	f000 ff3c 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (c & 0x02) > 0 ? 1 : 0);
 80005a4:	f3c5 0240 	ubfx	r2, r5, #1, #1
 80005a8:	4620      	mov	r0, r4
 80005aa:	2102      	movs	r1, #2
 80005ac:	f000 ff36 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (c & 0x04) > 0 ? 1 : 0);
 80005b0:	f3c5 0280 	ubfx	r2, r5, #2, #1
 80005b4:	4620      	mov	r0, r4
 80005b6:	2104      	movs	r1, #4
 80005b8:	f000 ff30 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (c & 0x08) > 0 ? 1 : 0);
 80005bc:	f3c5 02c0 	ubfx	r2, r5, #3, #1
 80005c0:	4620      	mov	r0, r4
 80005c2:	2108      	movs	r1, #8
 80005c4:	f000 ff2a 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_GPIO_Port, DB4_Pin, (c & 0x10) > 0 ? 1 : 0);
 80005c8:	f3c5 1200 	ubfx	r2, r5, #4, #1
 80005cc:	4620      	mov	r0, r4
 80005ce:	2110      	movs	r1, #16
 80005d0:	f000 ff24 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port, DB5_Pin, (c & 0x20) > 0 ? 1 : 0);
 80005d4:	f3c5 1240 	ubfx	r2, r5, #5, #1
 80005d8:	4620      	mov	r0, r4
 80005da:	2120      	movs	r1, #32
 80005dc:	f000 ff1e 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, (c & 0x40) > 0 ? 1 : 0);
 80005e0:	f3c5 1280 	ubfx	r2, r5, #6, #1
 80005e4:	4620      	mov	r0, r4
 80005e6:	2140      	movs	r1, #64	; 0x40
 80005e8:	f000 ff18 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, (c & 0x80) > 0 ? 1 : 0);
 80005ec:	09ea      	lsrs	r2, r5, #7
 80005ee:	4620      	mov	r0, r4
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	f000 ff13 	bl	800141c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fc:	4630      	mov	r0, r6
 80005fe:	f000 ff0d 	bl	800141c <HAL_GPIO_WritePin>
	HAL_Delay(1); // usaremos 1mili por enquanto
 8000602:	2001      	movs	r0, #1
 8000604:	f000 fbbc 	bl	8000d80 <HAL_Delay>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 8000608:	4630      	mov	r0, r6
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 8000610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 8000614:	f000 bf02 	b.w	800141c <HAL_GPIO_WritePin>
 8000618:	40020800 	.word	0x40020800
 800061c:	40020c00 	.word	0x40020c00

08000620 <lcd_set_addr>:

void lcd_set_addr(uint8_t addr)
{
 8000620:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 0);
 8000622:	4e24      	ldr	r6, [pc, #144]	; (80006b4 <lcd_set_addr+0x94>)

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (addr & 0x01) > 0 ? 1 : 0);
 8000624:	4c24      	ldr	r4, [pc, #144]	; (80006b8 <lcd_set_addr+0x98>)
{
 8000626:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	4630      	mov	r0, r6
 800062c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000630:	f000 fef4 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (addr & 0x01) > 0 ? 1 : 0);
 8000634:	f005 0201 	and.w	r2, r5, #1
 8000638:	4620      	mov	r0, r4
 800063a:	2101      	movs	r1, #1
 800063c:	f000 feee 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (addr & 0x02) > 0 ? 1 : 0);
 8000640:	f3c5 0240 	ubfx	r2, r5, #1, #1
 8000644:	4620      	mov	r0, r4
 8000646:	2102      	movs	r1, #2
 8000648:	f000 fee8 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (addr & 0x04) > 0 ? 1 : 0);
 800064c:	f3c5 0280 	ubfx	r2, r5, #2, #1
 8000650:	4620      	mov	r0, r4
 8000652:	2104      	movs	r1, #4
 8000654:	f000 fee2 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (addr & 0x08) > 0 ? 1 : 0);
 8000658:	f3c5 02c0 	ubfx	r2, r5, #3, #1
 800065c:	4620      	mov	r0, r4
 800065e:	2108      	movs	r1, #8
 8000660:	f000 fedc 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_GPIO_Port, DB4_Pin, (addr & 0x10) > 0 ? 1 : 0);
 8000664:	f3c5 1200 	ubfx	r2, r5, #4, #1
 8000668:	4620      	mov	r0, r4
 800066a:	2110      	movs	r1, #16
 800066c:	f000 fed6 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port, DB5_Pin, (addr & 0x20) > 0 ? 1 : 0);
 8000670:	f3c5 1240 	ubfx	r2, r5, #5, #1
 8000674:	4620      	mov	r0, r4
 8000676:	2120      	movs	r1, #32
 8000678:	f000 fed0 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, (addr & 0x40) > 0 ? 1 : 0);
 800067c:	f3c5 1280 	ubfx	r2, r5, #6, #1
 8000680:	4620      	mov	r0, r4
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	f000 feca 	bl	800141c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, 1);
 8000688:	4620      	mov	r0, r4
 800068a:	2201      	movs	r2, #1
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	f000 fec5 	bl	800141c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 1);
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000698:	4630      	mov	r0, r6
 800069a:	f000 febf 	bl	800141c <HAL_GPIO_WritePin>
	HAL_Delay(1); // usaremos 1mili por enquanto
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 fb6e 	bl	8000d80 <HAL_Delay>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 80006a4:	4630      	mov	r0, r6
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 80006ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 80006b0:	f000 beb4 	b.w	800141c <HAL_GPIO_WritePin>
 80006b4:	40020800 	.word	0x40020800
 80006b8:	40020c00 	.word	0x40020c00

080006bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 80006be:	4814      	ldr	r0, [pc, #80]	; (8000710 <MX_ADC1_Init+0x54>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c0:	4a14      	ldr	r2, [pc, #80]	; (8000714 <MX_ADC1_Init+0x58>)
 80006c2:	2400      	movs	r4, #0
 80006c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c8:	e880 001c 	stmia.w	r0, {r2, r3, r4}
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_ADC1_Init+0x5c>)
 80006ce:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 80006d0:	2301      	movs	r3, #1
  hadc1.Init.ScanConvMode = DISABLE;
 80006d2:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d4:	6184      	str	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d6:	6204      	str	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d8:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006da:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006dc:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006de:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e0:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e2:	f000 fb61 	bl	8000da8 <HAL_ADC_Init>
 80006e6:	b118      	cbz	r0, 80006f0 <MX_ADC1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80006e8:	2148      	movs	r1, #72	; 0x48
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <MX_ADC1_Init+0x60>)
 80006ec:	f000 fa18 	bl	8000b20 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
 80006f0:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f2:	4669      	mov	r1, sp
 80006f4:	4806      	ldr	r0, [pc, #24]	; (8000710 <MX_ADC1_Init+0x54>)
  sConfig.Channel = ADC_CHANNEL_0;
 80006f6:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 80006f8:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006fa:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fc:	f000 fcac 	bl	8001058 <HAL_ADC_ConfigChannel>
 8000700:	b118      	cbz	r0, 800070a <MX_ADC1_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000702:	2152      	movs	r1, #82	; 0x52
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_ADC1_Init+0x60>)
 8000706:	f000 fa0b 	bl	8000b20 <_Error_Handler>
  }

}
 800070a:	b004      	add	sp, #16
 800070c:	bd10      	pop	{r4, pc}
 800070e:	bf00      	nop
 8000710:	2000004c 	.word	0x2000004c
 8000714:	40012000 	.word	0x40012000
 8000718:	0f000001 	.word	0x0f000001
 800071c:	08001c65 	.word	0x08001c65

08000720 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000720:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8000722:	6802      	ldr	r2, [r0, #0]
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <HAL_ADC_MspInit+0x3c>)
 8000726:	429a      	cmp	r2, r3
 8000728:	d115      	bne.n	8000756 <HAL_ADC_MspInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800072a:	2100      	movs	r1, #0
 800072c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000730:	9100      	str	r1, [sp, #0]
 8000732:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	480a      	ldr	r0, [pc, #40]	; (8000760 <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800073a:	645a      	str	r2, [r3, #68]	; 0x44
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000748:	2301      	movs	r3, #1
 800074a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800074e:	2303      	movs	r3, #3
 8000750:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f000 fd83 	bl	800125c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000756:	b007      	add	sp, #28
 8000758:	f85d fb04 	ldr.w	pc, [sp], #4
 800075c:	40012000 	.word	0x40012000
 8000760:	40020000 	.word	0x40020000

08000764 <keyboard_init>:
#include "stm32f4xx_hal.h"
#include "adc.h"

uint16_t aux;

void keyboard_init() {
 8000764:	4770      	bx	lr
	...

08000768 <keyboard_read>:
	/* por pooling */
	//HAL_ADC_Start(&hadc1);
}

uint8_t keyboard_read() {
 8000768:	b508      	push	{r3, lr}
	/* por pooling */
	HAL_ADC_Start(&hadc1);
 800076a:	4814      	ldr	r0, [pc, #80]	; (80007bc <keyboard_read+0x54>)
 800076c:	f000 fbc0 	bl	8000ef0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8000770:	210a      	movs	r1, #10
 8000772:	4812      	ldr	r0, [pc, #72]	; (80007bc <keyboard_read+0x54>)
 8000774:	f000 fc1c 	bl	8000fb0 <HAL_ADC_PollForConversion>

	//uint16_t aux = HAL_ADC_GetValue(&hadc1);
	aux = HAL_ADC_GetValue(&hadc1);
 8000778:	4810      	ldr	r0, [pc, #64]	; (80007bc <keyboard_read+0x54>)
 800077a:	f000 fc69 	bl	8001050 <HAL_ADC_GetValue>
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <keyboard_read+0x58>)
 8000780:	b280      	uxth	r0, r0

	if (aux < 100) { // nenhuma tecla pressionada
 8000782:	2863      	cmp	r0, #99	; 0x63
	aux = HAL_ADC_GetValue(&hadc1);
 8000784:	8018      	strh	r0, [r3, #0]
	if (aux < 100) { // nenhuma tecla pressionada
 8000786:	d910      	bls.n	80007aa <keyboard_read+0x42>
		return 0;
	}
	if (aux > 4000) { // tecla 1 pressionada
 8000788:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 800078c:	d80f      	bhi.n	80007ae <keyboard_read+0x46>
		return 1;
	}
	if (aux > 3300 && aux < 3500) { // tecla 2
 800078e:	f6a0 43e5 	subw	r3, r0, #3301	; 0xce5
 8000792:	2bc6      	cmp	r3, #198	; 0xc6
 8000794:	d90d      	bls.n	80007b2 <keyboard_read+0x4a>
		return 2;
	}
	if (aux > 1950 && aux < 2150) { // tecla 3
 8000796:	f2a0 739f 	subw	r3, r0, #1951	; 0x79f
 800079a:	2bc6      	cmp	r3, #198	; 0xc6
 800079c:	d90b      	bls.n	80007b6 <keyboard_read+0x4e>
		return 3;
	}
	if (aux < 800) { // tecla 4
 800079e:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
		return 4;
	}

	return 0xFF;
 80007a2:	bf34      	ite	cc
 80007a4:	2004      	movcc	r0, #4
 80007a6:	20ff      	movcs	r0, #255	; 0xff
 80007a8:	bd08      	pop	{r3, pc}
		return 0;
 80007aa:	2000      	movs	r0, #0
 80007ac:	bd08      	pop	{r3, pc}
		return 1;
 80007ae:	2001      	movs	r0, #1
 80007b0:	bd08      	pop	{r3, pc}
		return 2;
 80007b2:	2002      	movs	r0, #2
 80007b4:	bd08      	pop	{r3, pc}
		return 3;
 80007b6:	2003      	movs	r0, #3
}
 80007b8:	bd08      	pop	{r3, pc}
 80007ba:	bf00      	nop
 80007bc:	2000004c 	.word	0x2000004c
 80007c0:	20000094 	.word	0x20000094

080007c4 <lcdInit>:
 *  Created on: 19 de mai de 2018
 *      Author: luis
 */
#include "display.h"

void lcdInit(LCD *lcd) {
 80007c4:	b508      	push	{r3, lr}
	// limpa a memoria do display
	for (int i = 0; i < 16; i++) {
		lcd->Memory[0][i] = 0x20;
 80007c6:	2220      	movs	r2, #32
 80007c8:	1c43      	adds	r3, r0, #1
 80007ca:	3011      	adds	r0, #17
 80007cc:	f803 2b01 	strb.w	r2, [r3], #1
	for (int i = 0; i < 16; i++) {
 80007d0:	4283      	cmp	r3, r0
		lcd->Memory[1][i] = 0x20;
 80007d2:	73da      	strb	r2, [r3, #15]
	for (int i = 0; i < 16; i++) {
 80007d4:	d1fa      	bne.n	80007cc <lcdInit+0x8>
	}

	lcd_init();
 80007d6:	f7ff fe7f 	bl	80004d8 <lcd_init>
	lcd_cmd_write(0x01); // clear display
 80007da:	2001      	movs	r0, #1
 80007dc:	f7ff fed2 	bl	8000584 <lcd_cmd_write>
	lcd_cmd_write(0x02); // return home
 80007e0:	2002      	movs	r0, #2
 80007e2:	f7ff fecf 	bl	8000584 <lcd_cmd_write>
	lcd_cmd_write(0x06); // entry mode set
 80007e6:	2006      	movs	r0, #6
 80007e8:	f7ff fecc 	bl	8000584 <lcd_cmd_write>
	lcd_cmd_write(0x0C); // display on/off control
 80007ec:	200c      	movs	r0, #12
 80007ee:	f7ff fec9 	bl	8000584 <lcd_cmd_write>
	lcd_cmd_write(0x14); // cursor or display shift
 80007f2:	2014      	movs	r0, #20
 80007f4:	f7ff fec6 	bl	8000584 <lcd_cmd_write>
	lcd_cmd_write(0x38); // function set
 80007f8:	2038      	movs	r0, #56	; 0x38
 80007fa:	f7ff fec3 	bl	8000584 <lcd_cmd_write>
	HAL_Delay(10); // 10 mili
 80007fe:	200a      	movs	r0, #10
}
 8000800:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(10); // 10 mili
 8000804:	f000 babc 	b.w	8000d80 <HAL_Delay>

08000808 <lcdWrite>:

	return 0;
}
#endif

void lcdWrite(LCD *lcd, char *string, uint8_t lin, uint8_t col) {
 8000808:	b570      	push	{r4, r5, r6, lr}
 800080a:	3901      	subs	r1, #1
	while (*string) {
 800080c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8000810:	b915      	cbnz	r5, 8000818 <lcdWrite+0x10>
			col = 0;
		}
		lcd->Memory[lin][col++] = *string;
		string++;
	}
	lcd->NeedsRedraw = 1;
 8000812:	2301      	movs	r3, #1
 8000814:	7003      	strb	r3, [r0, #0]
 8000816:	bd70      	pop	{r4, r5, r6, pc}
		if (col == 16 && lin == 0) {
 8000818:	2b10      	cmp	r3, #16
 800081a:	d102      	bne.n	8000822 <lcdWrite+0x1a>
 800081c:	b90a      	cbnz	r2, 8000822 <lcdWrite+0x1a>
			col = 0;
 800081e:	4613      	mov	r3, r2
			lin = 1;
 8000820:	2201      	movs	r2, #1
		lcd->Memory[lin][col++] = *string;
 8000822:	eb00 1402 	add.w	r4, r0, r2, lsl #4
 8000826:	1c5e      	adds	r6, r3, #1
 8000828:	4423      	add	r3, r4
 800082a:	705d      	strb	r5, [r3, #1]
 800082c:	b2f3      	uxtb	r3, r6
 800082e:	e7ed      	b.n	800080c <lcdWrite+0x4>

08000830 <lcdRuntTime>:
}

void lcdRuntTime(LCD *lcd) {
 8000830:	b570      	push	{r4, r5, r6, lr}
	if (lcd->NeedsRedraw == 1) {
 8000832:	7803      	ldrb	r3, [r0, #0]
 8000834:	2b01      	cmp	r3, #1
void lcdRuntTime(LCD *lcd) {
 8000836:	4605      	mov	r5, r0
	if (lcd->NeedsRedraw == 1) {
 8000838:	d118      	bne.n	800086c <lcdRuntTime+0x3c>
		lcd_set_addr(0x00);
 800083a:	2000      	movs	r0, #0
 800083c:	f7ff fef0 	bl	8000620 <lcd_set_addr>
 8000840:	1c6c      	adds	r4, r5, #1
 8000842:	f105 0611 	add.w	r6, r5, #17
		for (int i = 0; i < 16; i++) {
			lcd_write(lcd->Memory[0][i]);
 8000846:	f814 0b01 	ldrb.w	r0, [r4], #1
 800084a:	f7ff fe4d 	bl	80004e8 <lcd_write>
		for (int i = 0; i < 16; i++) {
 800084e:	42b4      	cmp	r4, r6
 8000850:	d1f9      	bne.n	8000846 <lcdRuntTime+0x16>
		}
		lcd_set_addr(0x40);
 8000852:	2040      	movs	r0, #64	; 0x40
 8000854:	f7ff fee4 	bl	8000620 <lcd_set_addr>
 8000858:	f105 0621 	add.w	r6, r5, #33	; 0x21
		for (int i = 0; i < 16; i++) {

			lcd_write(lcd->Memory[1][i]);
 800085c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000860:	f7ff fe42 	bl	80004e8 <lcd_write>
		for (int i = 0; i < 16; i++) {
 8000864:	42a6      	cmp	r6, r4
 8000866:	d1f9      	bne.n	800085c <lcdRuntTime+0x2c>
		}

		lcd->NeedsRedraw = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	702b      	strb	r3, [r5, #0]
 800086c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000870 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000874:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2400      	movs	r4, #0
 8000878:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <MX_GPIO_Init+0xc4>)
 800087a:	9401      	str	r4, [sp, #4]
 800087c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 800087e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8000940 <MX_GPIO_Init+0xd0>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, E_Pin|RS_Pin, GPIO_PIN_RESET);
 8000882:	4f2d      	ldr	r7, [pc, #180]	; (8000938 <MX_GPIO_Init+0xc8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin 
 8000884:	4e2d      	ldr	r6, [pc, #180]	; (800093c <MX_GPIO_Init+0xcc>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800088a:	631a      	str	r2, [r3, #48]	; 0x30
 800088c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800088e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000892:	9201      	str	r2, [sp, #4]
 8000894:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	9402      	str	r4, [sp, #8]
 8000898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800089a:	f042 0201 	orr.w	r2, r2, #1
 800089e:	631a      	str	r2, [r3, #48]	; 0x30
 80008a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008a2:	f002 0201 	and.w	r2, r2, #1
 80008a6:	9202      	str	r2, [sp, #8]
 80008a8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	9403      	str	r4, [sp, #12]
 80008ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008ae:	f042 0204 	orr.w	r2, r2, #4
 80008b2:	631a      	str	r2, [r3, #48]	; 0x30
 80008b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008b6:	f002 0204 	and.w	r2, r2, #4
 80008ba:	9203      	str	r2, [sp, #12]
 80008bc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008be:	9404      	str	r4, [sp, #16]
 80008c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008c2:	f042 0208 	orr.w	r2, r2, #8
 80008c6:	631a      	str	r2, [r3, #48]	; 0x30
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80008d0:	4622      	mov	r2, r4
 80008d2:	4640      	mov	r0, r8
 80008d4:	2102      	movs	r1, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d6:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80008d8:	f000 fda0 	bl	800141c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, E_Pin|RS_Pin, GPIO_PIN_RESET);
 80008dc:	4622      	mov	r2, r4
 80008de:	4638      	mov	r0, r7
 80008e0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80008e4:	f000 fd9a 	bl	800141c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin 
 80008e8:	4622      	mov	r2, r4
 80008ea:	4630      	mov	r0, r6
 80008ec:	21ff      	movs	r1, #255	; 0xff
 80008ee:	f000 fd95 	bl	800141c <HAL_GPIO_WritePin>
                          |DB4_Pin|DB5_Pin|DB6_Pin|DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = TX_EN_Pin;
 80008f4:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 80008f6:	a905      	add	r1, sp, #20
 80008f8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = TX_EN_Pin;
 80008fa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8000902:	f000 fcab 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = E_Pin|RS_Pin;
 8000906:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	a905      	add	r1, sp, #20
 800090c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = E_Pin|RS_Pin;
 800090e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f000 fca1 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin 
 800091a:	23ff      	movs	r3, #255	; 0xff
                          |DB4_Pin|DB5_Pin|DB6_Pin|DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091c:	a905      	add	r1, sp, #20
 800091e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin 
 8000920:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000928:	f000 fc98 	bl	800125c <HAL_GPIO_Init>

}
 800092c:	b00a      	add	sp, #40	; 0x28
 800092e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40020800 	.word	0x40020800
 800093c:	40020c00 	.word	0x40020c00
 8000940:	40020000 	.word	0x40020000

08000944 <keyboardInit>:
 *      Author: luis
 */

#include "keyboard.h"

void keyboardInit(KeyboardCallback callback) {
 8000944:	b510      	push	{r4, lr}
 8000946:	4604      	mov	r4, r0
	keyboard_init();
 8000948:	f7ff ff0c 	bl	8000764 <keyboard_init>

	Keyboard.Callback = callback;
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <keyboardInit+0x14>)
	Keyboard.OldValue = 0xFF; // Dummy Value
 800094e:	22ff      	movs	r2, #255	; 0xff
 8000950:	715a      	strb	r2, [r3, #5]
	Keyboard.Callback = callback;
 8000952:	601c      	str	r4, [r3, #0]
	Keyboard.OldValue = 0xFF; // Dummy Value
 8000954:	bd10      	pop	{r4, pc}
 8000956:	bf00      	nop
 8000958:	20000098 	.word	0x20000098

0800095c <keyboardRuntime>:
}

// TODO: se ficar pressionando a tecla o tempo todo, vai ficar chamando essa funcao
// Para isso, implementamos um "keyboard_changed", que garante que o "evento" nao seja
// chamado o tempo todo
void keyboardRuntime() {
 800095c:	b510      	push	{r4, lr}
	uint8_t chave = keyboard_read();
 800095e:	f7ff ff03 	bl	8000768 <keyboard_read>

	if (Keyboard.Callback) {
 8000962:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <keyboardRuntime+0x3c>)
 8000964:	6813      	ldr	r3, [r2, #0]
 8000966:	b1b3      	cbz	r3, 8000996 <keyboardRuntime+0x3a>
		if (chave != Keyboard.OldValue) { // se for diferente
 8000968:	7951      	ldrb	r1, [r2, #5]
 800096a:	4281      	cmp	r1, r0
 800096c:	d013      	beq.n	8000996 <keyboardRuntime+0x3a>

			Keyboard.OldValue = chave; // atualiza valor  do teclado
 800096e:	7150      	strb	r0, [r2, #5]
			switch (chave) {
 8000970:	2804      	cmp	r0, #4
 8000972:	d810      	bhi.n	8000996 <keyboardRuntime+0x3a>
 8000974:	e8df f000 	tbb	[pc, r0]
 8000978:	0b090703 	.word	0x0b090703
 800097c:	0d          	.byte	0x0d
 800097d:	00          	.byte	0x00
			case 0:
				// nenhuma tecla pressionada
				Keyboard.Callback(KEYNONE);
 800097e:	2004      	movs	r0, #4

				break;
			}
		}
	}
}
 8000980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				Keyboard.Callback(KEY4);
 8000984:	4718      	bx	r3
				Keyboard.Callback(KEY1);
 8000986:	2000      	movs	r0, #0
 8000988:	e7fa      	b.n	8000980 <keyboardRuntime+0x24>
				Keyboard.Callback(KEY2);
 800098a:	2001      	movs	r0, #1
 800098c:	e7f8      	b.n	8000980 <keyboardRuntime+0x24>
				Keyboard.Callback(KEY3);
 800098e:	2002      	movs	r0, #2
 8000990:	e7f6      	b.n	8000980 <keyboardRuntime+0x24>
				Keyboard.Callback(KEY4);
 8000992:	2003      	movs	r0, #3
 8000994:	e7f4      	b.n	8000980 <keyboardRuntime+0x24>
 8000996:	bd10      	pop	{r4, pc}
 8000998:	20000098 	.word	0x20000098

0800099c <OnExitMenu2>:
void OnKeyMenu2(KEYS key) {

	menuGoto(0);
}

void OnExitMenu2() {
 800099c:	4770      	bx	lr

0800099e <onKeyPressed>:
	if (key != KEYNONE) {
 800099e:	2804      	cmp	r0, #4
 80009a0:	d001      	beq.n	80009a6 <onKeyPressed+0x8>
	menuSetKey(key);
 80009a2:	f000 b8d7 	b.w	8000b54 <menuSetKey>
 80009a6:	4770      	bx	lr

080009a8 <OnRenderMenu1>:
	lcdWrite(&lcd, "menu 1\0", 0, 0);
 80009a8:	2300      	movs	r3, #0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4901      	ldr	r1, [pc, #4]	; (80009b4 <OnRenderMenu1+0xc>)
 80009ae:	4802      	ldr	r0, [pc, #8]	; (80009b8 <OnRenderMenu1+0x10>)
 80009b0:	f7ff bf2a 	b.w	8000808 <lcdWrite>
 80009b4:	08001c4c 	.word	0x08001c4c
 80009b8:	200000a0 	.word	0x200000a0

080009bc <OnRenderMenu2>:
	lcdWrite(&lcd, "menu 2\0", 0, 0);
 80009bc:	2300      	movs	r3, #0
 80009be:	461a      	mov	r2, r3
 80009c0:	4901      	ldr	r1, [pc, #4]	; (80009c8 <OnRenderMenu2+0xc>)
 80009c2:	4802      	ldr	r0, [pc, #8]	; (80009cc <OnRenderMenu2+0x10>)
 80009c4:	f7ff bf20 	b.w	8000808 <lcdWrite>
 80009c8:	08001c54 	.word	0x08001c54
 80009cc:	200000a0 	.word	0x200000a0

080009d0 <OnKeyMenu1>:
	menuGoto(1);
 80009d0:	2001      	movs	r0, #1
 80009d2:	f000 b8bd 	b.w	8000b50 <menuGoto>

080009d6 <OnKeyMenu2>:
	menuGoto(0);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 b8ba 	b.w	8000b50 <menuGoto>

080009dc <OnEnterMenu2>:
 80009dc:	4770      	bx	lr

080009de <OnEnterMenu1>:
 80009de:	4770      	bx	lr

080009e0 <OnExitMenu1>:
 80009e0:	4770      	bx	lr
	...

080009e4 <HAL_SYSTICK_Callback>:
void HAL_SYSTICK_Callback(void) {
 80009e4:	b510      	push	{r4, lr}
	if (tempo > 20) { // se passou 20ms
 80009e6:	4c06      	ldr	r4, [pc, #24]	; (8000a00 <HAL_SYSTICK_Callback+0x1c>)
 80009e8:	7823      	ldrb	r3, [r4, #0]
 80009ea:	2b14      	cmp	r3, #20
 80009ec:	d903      	bls.n	80009f6 <HAL_SYSTICK_Callback+0x12>
		tempo = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	7023      	strb	r3, [r4, #0]
		menuDraw();
 80009f2:	f000 f8b5 	bl	8000b60 <menuDraw>
	tempo++;
 80009f6:	7823      	ldrb	r3, [r4, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	7023      	strb	r3, [r4, #0]
 80009fe:	bd10      	pop	{r4, pc}
 8000a00:	20000048 	.word	0x20000048

08000a04 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a04:	b530      	push	{r4, r5, lr}
 8000a06:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <SystemClock_Config+0xa4>)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	9101      	str	r1, [sp, #4]
 8000a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a14:	641a      	str	r2, [r3, #64]	; 0x40
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	9b01      	ldr	r3, [sp, #4]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <SystemClock_Config+0xa8>)
 8000a22:	9102      	str	r1, [sp, #8]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	9302      	str	r3, [sp, #8]
 8000a34:	9b02      	ldr	r3, [sp, #8]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a36:	2301      	movs	r3, #1
 8000a38:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3e:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a44:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000a46:	2404      	movs	r4, #4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a48:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 168;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 4;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a4a:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000a4c:	23a8      	movs	r3, #168	; 0xa8
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4e:	950e      	str	r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000a50:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000a52:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a54:	9512      	str	r5, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a56:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a58:	f000 fce6 	bl	8001428 <HAL_RCC_OscConfig>
 8000a5c:	b100      	cbz	r0, 8000a60 <SystemClock_Config+0x5c>
 8000a5e:	e7fe      	b.n	8000a5e <SystemClock_Config+0x5a>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a60:	230f      	movs	r3, #15
 8000a62:	9303      	str	r3, [sp, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a68:	9005      	str	r0, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a6a:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000a6c:	2105      	movs	r1, #5
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000a72:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a74:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a76:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000a78:	f000 fe86 	bl	8001788 <HAL_RCC_ClockConfig>
 8000a7c:	4605      	mov	r5, r0
 8000a7e:	b100      	cbz	r0, 8000a82 <SystemClock_Config+0x7e>
 8000a80:	e7fe      	b.n	8000a80 <SystemClock_Config+0x7c>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8000a82:	f000 ff1b 	bl	80018bc <HAL_RCC_GetHCLKFreq>
 8000a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a8e:	f000 fbbf 	bl	8001210 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000a92:	4620      	mov	r0, r4
 8000a94:	f000 fbd2 	bl	800123c <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000a98:	462a      	mov	r2, r5
 8000a9a:	4629      	mov	r1, r5
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa0:	f000 fb82 	bl	80011a8 <HAL_NVIC_SetPriority>
}
 8000aa4:	b015      	add	sp, #84	; 0x54
 8000aa6:	bd30      	pop	{r4, r5, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000

08000ab0 <main>:
int main(void) {
 8000ab0:	b508      	push	{r3, lr}
	HAL_Init();
 8000ab2:	f000 f939 	bl	8000d28 <HAL_Init>
	SystemClock_Config();
 8000ab6:	f7ff ffa5 	bl	8000a04 <SystemClock_Config>
	MX_GPIO_Init();
 8000aba:	f7ff fed9 	bl	8000870 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000abe:	f000 f8c7 	bl	8000c50 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000ac2:	f7ff fdfb 	bl	80006bc <MX_ADC1_Init>
	lcdInit(&lcd);
 8000ac6:	4811      	ldr	r0, [pc, #68]	; (8000b0c <main+0x5c>)
		lcdRuntTime(&lcd);
 8000ac8:	4c10      	ldr	r4, [pc, #64]	; (8000b0c <main+0x5c>)
	lcdInit(&lcd);
 8000aca:	f7ff fe7b 	bl	80007c4 <lcdInit>
	lcdWrite(&lcd, "Kunzler\0", 1, 4);
 8000ace:	2304      	movs	r3, #4
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	490f      	ldr	r1, [pc, #60]	; (8000b10 <main+0x60>)
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <main+0x5c>)
 8000ad6:	f7ff fe97 	bl	8000808 <lcdWrite>
	menuInit();
 8000ada:	f000 f822 	bl	8000b22 <menuInit>
	menuSetPosition(0, &menu1);
 8000ade:	490d      	ldr	r1, [pc, #52]	; (8000b14 <main+0x64>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f000 f81f 	bl	8000b24 <menuSetPosition>
	menuSetPosition(1, &menu2);
 8000ae6:	490c      	ldr	r1, [pc, #48]	; (8000b18 <main+0x68>)
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f000 f81b 	bl	8000b24 <menuSetPosition>
	menuGoto(0); // vai para a posicao 0
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 f82e 	bl	8000b50 <menuGoto>
	keyboardInit(&onKeyPressed);
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <main+0x6c>)
 8000af6:	f7ff ff25 	bl	8000944 <keyboardInit>
		lcdRuntTime(&lcd);
 8000afa:	4620      	mov	r0, r4
 8000afc:	f7ff fe98 	bl	8000830 <lcdRuntTime>
		keyboardRuntime();
 8000b00:	f7ff ff2c 	bl	800095c <keyboardRuntime>
		menuRuntime();
 8000b04:	f000 f832 	bl	8000b6c <menuRuntime>
 8000b08:	e7f7      	b.n	8000afa <main+0x4a>
 8000b0a:	bf00      	nop
 8000b0c:	200000a0 	.word	0x200000a0
 8000b10:	08001c5c 	.word	0x08001c5c
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000010 	.word	0x20000010
 8000b1c:	0800099f 	.word	0x0800099f

08000b20 <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 8000b20:	e7fe      	b.n	8000b20 <_Error_Handler>

08000b22 <menuInit>:

#include "menu.h"

void _menuEnterPosition(uint8_t pos);

void menuInit() {
 8000b22:	4770      	bx	lr

08000b24 <menuSetPosition>:
void menuGoto(uint8_t pos) {
	_menuEnterPosition(pos);
}

void menuSetPosition(uint8_t pos, MenuItem *item) {
	Menu.Items[pos] = item;
 8000b24:	3002      	adds	r0, #2
 8000b26:	4b02      	ldr	r3, [pc, #8]	; (8000b30 <menuSetPosition+0xc>)
 8000b28:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200000c4 	.word	0x200000c4

08000b34 <_menuEnterPosition>:
}

void _menuEnterPosition(uint8_t pos) {
 8000b34:	b510      	push	{r4, lr}
	Menu.Current = Menu.Items[pos];
 8000b36:	3002      	adds	r0, #2
 8000b38:	4c04      	ldr	r4, [pc, #16]	; (8000b4c <_menuEnterPosition+0x18>)
 8000b3a:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 8000b3e:	6063      	str	r3, [r4, #4]
	Menu.Current->Enter();
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4798      	blx	r3
	Menu.NeedsRedraw = 1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	7023      	strb	r3, [r4, #0]
 8000b48:	bd10      	pop	{r4, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000c4 	.word	0x200000c4

08000b50 <menuGoto>:
	_menuEnterPosition(pos);
 8000b50:	f7ff bff0 	b.w	8000b34 <_menuEnterPosition>

08000b54 <menuSetKey>:

	_menuEnterPosition(Menu.Index);
}

void menuSetKey(KEYS key) {
	Menu.Current->KeyPressed(key);
 8000b54:	4b01      	ldr	r3, [pc, #4]	; (8000b5c <menuSetKey+0x8>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	4718      	bx	r3
 8000b5c:	200000c4 	.word	0x200000c4

08000b60 <menuDraw>:
}

void menuDraw() {
	Menu.NeedsRedraw = 1;
 8000b60:	4b01      	ldr	r3, [pc, #4]	; (8000b68 <menuDraw+0x8>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	4770      	bx	lr
 8000b68:	200000c4 	.word	0x200000c4

08000b6c <menuRuntime>:
	Menu.Index = 0;
	_menuEnterPosition(Menu.Index);
}

void menuRuntime() {
	if (Menu.NeedsRedraw) {
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <menuRuntime+0x14>)
 8000b6e:	781a      	ldrb	r2, [r3, #0]
 8000b70:	b12a      	cbz	r2, 8000b7e <menuRuntime+0x12>
		Menu.NeedsRedraw = 0;
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
		if (Menu.Current) {
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	b10b      	cbz	r3, 8000b7e <menuRuntime+0x12>
			Menu.Current->Render();
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	4718      	bx	r3
 8000b7e:	4770      	bx	lr
 8000b80:	200000c4 	.word	0x200000c4

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b86:	2003      	movs	r0, #3
 8000b88:	f000 fafc 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4611      	mov	r1, r2
 8000b90:	f06f 000b 	mvn.w	r0, #11
 8000b94:	f000 fb08 	bl	80011a8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	f06f 000a 	mvn.w	r0, #10
 8000ba0:	f000 fb02 	bl	80011a8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	f06f 0009 	mvn.w	r0, #9
 8000bac:	f000 fafc 	bl	80011a8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	f06f 0004 	mvn.w	r0, #4
 8000bb8:	f000 faf6 	bl	80011a8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	f06f 0003 	mvn.w	r0, #3
 8000bc4:	f000 faf0 	bl	80011a8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4611      	mov	r1, r2
 8000bcc:	f06f 0001 	mvn.w	r0, #1
 8000bd0:	f000 faea 	bl	80011a8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000be0:	f000 bae2 	b.w	80011a8 <HAL_NVIC_SetPriority>

08000be4 <NMI_Handler>:
 8000be4:	4770      	bx	lr

08000be6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler>

08000be8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler>

08000bea <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler>

08000bec <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler>

08000bee <SVC_Handler>:
 8000bee:	4770      	bx	lr

08000bf0 <DebugMon_Handler>:
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000bf4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf6:	f000 f8b1 	bl	8000d5c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000bfe:	f000 bb29 	b.w	8001254 <HAL_SYSTICK_IRQHandler>
	...

08000c04 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	490f      	ldr	r1, [pc, #60]	; (8000c44 <SystemInit+0x40>)
 8000c06:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000c0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <SystemInit+0x44>)
 8000c14:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c16:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000c18:	f042 0201 	orr.w	r2, r2, #1
 8000c1c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000c1e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000c26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c2a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <SystemInit+0x48>)
 8000c2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c36:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c38:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c3e:	608b      	str	r3, [r1, #8]
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	24003010 	.word	0x24003010

08000c50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c50:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8000c52:	480c      	ldr	r0, [pc, #48]	; (8000c84 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USART2_UART_Init+0x38>)
 8000c56:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8000c5a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c5e:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c60:	2300      	movs	r3, #0
 8000c62:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c64:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c66:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c68:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c6e:	f000 ff65 	bl	8001b3c <HAL_UART_Init>
 8000c72:	b128      	cbz	r0, 8000c80 <MX_USART2_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000c74:	2142      	movs	r1, #66	; 0x42
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_USART2_UART_Init+0x3c>)
  }

}
 8000c78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000c7c:	f7ff bf50 	b.w	8000b20 <_Error_Handler>
 8000c80:	bd08      	pop	{r3, pc}
 8000c82:	bf00      	nop
 8000c84:	200000dc 	.word	0x200000dc
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	08001c8f 	.word	0x08001c8f

08000c90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8000c92:	6802      	ldr	r2, [r0, #0]
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_UART_MspInit+0x44>)
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d119      	bne.n	8000cce <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	480e      	ldr	r0, [pc, #56]	; (8000cdc <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ca8:	641a      	str	r2, [r3, #64]	; 0x40
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cb4:	230c      	movs	r3, #12
 8000cb6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f000 fac7 	bl	800125c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cce:	b007      	add	sp, #28
 8000cd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cd4:	40004400 	.word	0x40004400
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <HAL_InitTick+0x3c>)
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_InitTick+0x40>)
{
 8000ce6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce8:	7818      	ldrb	r0, [r3, #0]
 8000cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cee:	fbb3 f3f0 	udiv	r3, r3, r0
 8000cf2:	6810      	ldr	r0, [r2, #0]
 8000cf4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cf8:	f000 fa8a 	bl	8001210 <HAL_SYSTICK_Config>
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	b958      	cbnz	r0, 8000d18 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d00:	2d0f      	cmp	r5, #15
 8000d02:	d809      	bhi.n	8000d18 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	4602      	mov	r2, r0
 8000d06:	4629      	mov	r1, r5
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d0c:	f000 fa4c 	bl	80011a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <HAL_InitTick+0x44>)
 8000d12:	4620      	mov	r0, r4
 8000d14:	601d      	str	r5, [r3, #0]
 8000d16:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000d18:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000d1a:	bd38      	pop	{r3, r4, r5, pc}
 8000d1c:	20000020 	.word	0x20000020
 8000d20:	20000024 	.word	0x20000024
 8000d24:	20000028 	.word	0x20000028

08000d28 <HAL_Init>:
{
 8000d28:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_Init+0x30>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d32:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d3a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d42:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 fa1d 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff ffc8 	bl	8000ce0 <HAL_InitTick>
  HAL_MspInit();
 8000d50:	f7ff ff18 	bl	8000b84 <HAL_MspInit>
}
 8000d54:	2000      	movs	r0, #0
 8000d56:	bd08      	pop	{r3, pc}
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d5c:	4a03      	ldr	r2, [pc, #12]	; (8000d6c <HAL_IncTick+0x10>)
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <HAL_IncTick+0x14>)
 8000d60:	6811      	ldr	r1, [r2, #0]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	440b      	add	r3, r1
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	2000011c 	.word	0x2000011c
 8000d70:	20000024 	.word	0x20000024

08000d74 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d74:	4b01      	ldr	r3, [pc, #4]	; (8000d7c <HAL_GetTick+0x8>)
 8000d76:	6818      	ldr	r0, [r3, #0]
}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	2000011c 	.word	0x2000011c

08000d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d80:	b538      	push	{r3, r4, r5, lr}
 8000d82:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff fff6 	bl	8000d74 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d88:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8a:	bf1c      	itt	ne
 8000d8c:	4b05      	ldrne	r3, [pc, #20]	; (8000da4 <HAL_Delay+0x24>)
 8000d8e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000d92:	bf18      	it	ne
 8000d94:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d96:	f7ff ffed 	bl	8000d74 <HAL_GetTick>
 8000d9a:	1b40      	subs	r0, r0, r5
 8000d9c:	4284      	cmp	r4, r0
 8000d9e:	d8fa      	bhi.n	8000d96 <HAL_Delay+0x16>
  {
  }
}
 8000da0:	bd38      	pop	{r3, r4, r5, pc}
 8000da2:	bf00      	nop
 8000da4:	20000024 	.word	0x20000024

08000da8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000da8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000daa:	4604      	mov	r4, r0
 8000dac:	2800      	cmp	r0, #0
 8000dae:	f000 8099 	beq.w	8000ee4 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000db2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000db4:	b923      	cbnz	r3, 8000dc0 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000db6:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000db8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dbc:	f7ff fcb0 	bl	8000720 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dc2:	06db      	lsls	r3, r3, #27
 8000dc4:	f100 808c 	bmi.w	8000ee0 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dce:	f023 0302 	bic.w	r3, r3, #2
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000dd8:	4b43      	ldr	r3, [pc, #268]	; (8000ee8 <HAL_ADC_Init+0x140>)
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000de0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	6861      	ldr	r1, [r4, #4]
 8000de6:	430a      	orrs	r2, r1
 8000de8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dea:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000dec:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000df4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000dfc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000dfe:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e00:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e02:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e06:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e0e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e10:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e1e:	4933      	ldr	r1, [pc, #204]	; (8000eec <HAL_ADC_Init+0x144>)
 8000e20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e22:	428a      	cmp	r2, r1
 8000e24:	d050      	beq.n	8000ec8 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e26:	6899      	ldr	r1, [r3, #8]
 8000e28:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000e2c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e2e:	6899      	ldr	r1, [r3, #8]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e34:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e36:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e42:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e44:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000e46:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e48:	f022 0202 	bic.w	r2, r2, #2
 8000e4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000e54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e56:	6a22      	ldr	r2, [r4, #32]
 8000e58:	2a00      	cmp	r2, #0
 8000e5a:	d03d      	beq.n	8000ed8 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e5c:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e64:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000e6c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	3901      	subs	r1, #1
 8000e72:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e7a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e7c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e84:	3901      	subs	r1, #1
 8000e86:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e8c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000e8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000e9c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e9e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ea0:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ea6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ea8:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000eaa:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000eac:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000eb0:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000eb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000eb6:	f023 0303 	bic.w	r3, r3, #3
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000ec6:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ece:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ed6:	e7b4      	b.n	8000e42 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ede:	e7ca      	b.n	8000e76 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	e7ed      	b.n	8000ec0 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000ee4:	2001      	movs	r0, #1
}
 8000ee6:	bd10      	pop	{r4, pc}
 8000ee8:	40012300 	.word	0x40012300
 8000eec:	0f000001 	.word	0x0f000001

08000ef0 <HAL_ADC_Start>:
{
 8000ef0:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000ef6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d04e      	beq.n	8000f9c <HAL_ADC_Start+0xac>
 8000efe:	2301      	movs	r3, #1
 8000f00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f04:	6803      	ldr	r3, [r0, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	07d1      	lsls	r1, r2, #31
 8000f0a:	d505      	bpl.n	8000f18 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	07d2      	lsls	r2, r2, #31
 8000f10:	d414      	bmi.n	8000f3c <HAL_ADC_Start+0x4c>
  return HAL_OK;
 8000f12:	2000      	movs	r0, #0
}
 8000f14:	b002      	add	sp, #8
 8000f16:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000f18:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f1a:	4921      	ldr	r1, [pc, #132]	; (8000fa0 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8000f1c:	f042 0201 	orr.w	r2, r2, #1
 8000f20:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f22:	4a20      	ldr	r2, [pc, #128]	; (8000fa4 <HAL_ADC_Start+0xb4>)
 8000f24:	6812      	ldr	r2, [r2, #0]
 8000f26:	fbb2 f2f1 	udiv	r2, r2, r1
 8000f2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000f2e:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000f30:	9a01      	ldr	r2, [sp, #4]
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d0ea      	beq.n	8000f0c <HAL_ADC_Start+0x1c>
      counter--;
 8000f36:	9a01      	ldr	r2, [sp, #4]
 8000f38:	3a01      	subs	r2, #1
 8000f3a:	e7f8      	b.n	8000f2e <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000f3c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000f3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000f42:	f022 0201 	bic.w	r2, r2, #1
 8000f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f4a:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f50:	bf41      	itttt	mi
 8000f52:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000f54:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000f58:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000f5c:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f5e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000f60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f64:	bf1c      	itt	ne
 8000f66:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000f68:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000f6c:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f74:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f78:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <HAL_ADC_Start+0xb8>)
 8000f7c:	6852      	ldr	r2, [r2, #4]
 8000f7e:	06d2      	lsls	r2, r2, #27
 8000f80:	d108      	bne.n	8000f94 <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f82:	6898      	ldr	r0, [r3, #8]
 8000f84:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000f88:	d1c3      	bne.n	8000f12 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	e7bf      	b.n	8000f14 <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f94:	4a05      	ldr	r2, [pc, #20]	; (8000fac <HAL_ADC_Start+0xbc>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d1bb      	bne.n	8000f12 <HAL_ADC_Start+0x22>
 8000f9a:	e7f2      	b.n	8000f82 <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	e7b9      	b.n	8000f14 <HAL_ADC_Start+0x24>
 8000fa0:	000f4240 	.word	0x000f4240
 8000fa4:	20000020 	.word	0x20000020
 8000fa8:	40012300 	.word	0x40012300
 8000fac:	40012000 	.word	0x40012000

08000fb0 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fb0:	6803      	ldr	r3, [r0, #0]
 8000fb2:	689a      	ldr	r2, [r3, #8]
{
 8000fb4:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fb6:	0556      	lsls	r6, r2, #21
{
 8000fb8:	4604      	mov	r4, r0
 8000fba:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fbc:	d50b      	bpl.n	8000fd6 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000fbe:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fc0:	05d8      	lsls	r0, r3, #23
 8000fc2:	d508      	bpl.n	8000fd6 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fc6:	f043 0320 	orr.w	r3, r3, #32
 8000fca:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8000fd6:	f7ff fecd 	bl	8000d74 <HAL_GetTick>
 8000fda:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	0792      	lsls	r2, r2, #30
 8000fe2:	d50c      	bpl.n	8000ffe <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fe4:	f06f 0212 	mvn.w	r2, #18
 8000fe8:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ff0:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000ff8:	d013      	beq.n	8001022 <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000ffe:	1c69      	adds	r1, r5, #1
 8001000:	d0ed      	beq.n	8000fde <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001002:	b945      	cbnz	r5, 8001016 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001004:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 800100c:	2300      	movs	r3, #0
 800100e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001012:	2003      	movs	r0, #3
 8001014:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001016:	f7ff fead 	bl	8000d74 <HAL_GetTick>
 800101a:	1b80      	subs	r0, r0, r6
 800101c:	4285      	cmp	r5, r0
 800101e:	d2dd      	bcs.n	8000fdc <HAL_ADC_PollForConversion+0x2c>
 8001020:	e7f0      	b.n	8001004 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001022:	69a2      	ldr	r2, [r4, #24]
 8001024:	2a00      	cmp	r2, #0
 8001026:	d1e8      	bne.n	8000ffa <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800102a:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800102e:	d002      	beq.n	8001036 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001030:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001032:	055b      	lsls	r3, r3, #21
 8001034:	d4e1      	bmi.n	8000ffa <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001036:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800103c:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800103e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001040:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8001044:	d1d9      	bne.n	8000ffa <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001046:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800104e:	bd70      	pop	{r4, r5, r6, pc}

08001050 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001050:	6803      	ldr	r3, [r0, #0]
 8001052:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001054:	4770      	bx	lr
	...

08001058 <HAL_ADC_ConfigChannel>:
{
 8001058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800105a:	2300      	movs	r3, #0
 800105c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800105e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001062:	2b01      	cmp	r3, #1
 8001064:	f000 8083 	beq.w	800116e <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001068:	680d      	ldr	r5, [r1, #0]
 800106a:	6804      	ldr	r4, [r0, #0]
 800106c:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800106e:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001070:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001072:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8001076:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001078:	d92a      	bls.n	80010d0 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800107a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800107e:	68e7      	ldr	r7, [r4, #12]
 8001080:	3b1e      	subs	r3, #30
 8001082:	f04f 0e07 	mov.w	lr, #7
 8001086:	fa0e fe03 	lsl.w	lr, lr, r3
 800108a:	ea27 070e 	bic.w	r7, r7, lr
 800108e:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001090:	68e7      	ldr	r7, [r4, #12]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	433b      	orrs	r3, r7
 8001098:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800109a:	684a      	ldr	r2, [r1, #4]
 800109c:	2a06      	cmp	r2, #6
 800109e:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80010a2:	d825      	bhi.n	80010f0 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010a4:	4413      	add	r3, r2
 80010a6:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80010a8:	1f59      	subs	r1, r3, #5
 80010aa:	231f      	movs	r3, #31
 80010ac:	408b      	lsls	r3, r1
 80010ae:	ea27 0303 	bic.w	r3, r7, r3
 80010b2:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80010b6:	fa06 f101 	lsl.w	r1, r6, r1
 80010ba:	4311      	orrs	r1, r2
 80010bc:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_ADC_ConfigChannel+0x11c>)
 80010c0:	429c      	cmp	r4, r3
 80010c2:	d034      	beq.n	800112e <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80010c4:	2300      	movs	r3, #0
 80010c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80010ca:	4618      	mov	r0, r3
}
 80010cc:	b003      	add	sp, #12
 80010ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010d0:	6927      	ldr	r7, [r4, #16]
 80010d2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80010d6:	f04f 0e07 	mov.w	lr, #7
 80010da:	fa0e fe03 	lsl.w	lr, lr, r3
 80010de:	ea27 070e 	bic.w	r7, r7, lr
 80010e2:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010e4:	6927      	ldr	r7, [r4, #16]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	433b      	orrs	r3, r7
 80010ec:	6123      	str	r3, [r4, #16]
 80010ee:	e7d4      	b.n	800109a <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80010f0:	2a0c      	cmp	r2, #12
 80010f2:	d80e      	bhi.n	8001112 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010f4:	4413      	add	r3, r2
 80010f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80010f8:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80010fc:	231f      	movs	r3, #31
 80010fe:	4093      	lsls	r3, r2
 8001100:	ea21 0303 	bic.w	r3, r1, r3
 8001104:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001106:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001108:	fa06 f202 	lsl.w	r2, r6, r2
 800110c:	431a      	orrs	r2, r3
 800110e:	6322      	str	r2, [r4, #48]	; 0x30
 8001110:	e7d5      	b.n	80010be <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001112:	4413      	add	r3, r2
 8001114:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001116:	3b41      	subs	r3, #65	; 0x41
 8001118:	221f      	movs	r2, #31
 800111a:	409a      	lsls	r2, r3
 800111c:	ea21 0202 	bic.w	r2, r1, r2
 8001120:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001122:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001124:	fa06 f103 	lsl.w	r1, r6, r3
 8001128:	4311      	orrs	r1, r2
 800112a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800112c:	e7c7      	b.n	80010be <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800112e:	2d12      	cmp	r5, #18
 8001130:	d104      	bne.n	800113c <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001132:	4a11      	ldr	r2, [pc, #68]	; (8001178 <HAL_ADC_ConfigChannel+0x120>)
 8001134:	6853      	ldr	r3, [r2, #4]
 8001136:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800113a:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800113c:	f1a5 0310 	sub.w	r3, r5, #16
 8001140:	2b01      	cmp	r3, #1
 8001142:	d8bf      	bhi.n	80010c4 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <HAL_ADC_ConfigChannel+0x120>)
 8001146:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001148:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800114a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800114e:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001150:	d1b8      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_ADC_ConfigChannel+0x124>)
 8001154:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <HAL_ADC_ConfigChannel+0x128>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	fbb3 f2f2 	udiv	r2, r3, r2
 800115c:	230a      	movs	r3, #10
 800115e:	4353      	muls	r3, r2
        counter--;
 8001160:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001162:	9b01      	ldr	r3, [sp, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0ad      	beq.n	80010c4 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8001168:	9b01      	ldr	r3, [sp, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	e7f8      	b.n	8001160 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 800116e:	2002      	movs	r0, #2
 8001170:	e7ac      	b.n	80010cc <HAL_ADC_ConfigChannel+0x74>
 8001172:	bf00      	nop
 8001174:	40012000 	.word	0x40012000
 8001178:	40012300 	.word	0x40012300
 800117c:	20000020 	.word	0x20000020
 8001180:	000f4240 	.word	0x000f4240

08001184 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001186:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001188:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800118c:	041b      	lsls	r3, r3, #16
 800118e:	0c1b      	lsrs	r3, r3, #16
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001194:	0200      	lsls	r0, r0, #8
 8001196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800119e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80011a0:	60d3      	str	r3, [r2, #12]
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011aa:	b530      	push	{r4, r5, lr}
 80011ac:	68dc      	ldr	r4, [r3, #12]
 80011ae:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	bf28      	it	cs
 80011bc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	f04f 0501 	mov.w	r5, #1
 80011c4:	fa05 f303 	lsl.w	r3, r5, r3
 80011c8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011cc:	bf8c      	ite	hi
 80011ce:	3c03      	subhi	r4, #3
 80011d0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d2:	4019      	ands	r1, r3
 80011d4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d6:	fa05 f404 	lsl.w	r4, r5, r4
 80011da:	3c01      	subs	r4, #1
 80011dc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80011de:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	ea42 0201 	orr.w	r2, r2, r1
 80011e4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	bfaf      	iteee	ge
 80011ea:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	f000 000f 	andlt.w	r0, r0, #15
 80011f2:	4b06      	ldrlt	r3, [pc, #24]	; (800120c <HAL_NVIC_SetPriority+0x64>)
 80011f4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	bfa5      	ittet	ge
 80011f8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80011fc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001204:	bd30      	pop	{r4, r5, pc}
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00
 800120c:	e000ed14 	.word	0xe000ed14

08001210 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001210:	3801      	subs	r0, #1
 8001212:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001216:	d20a      	bcs.n	800122e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121a:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	21f0      	movs	r1, #240	; 0xf0
 8001220:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001224:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000e010 	.word	0xe000e010
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800123e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001240:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001242:	bf0c      	ite	eq
 8001244:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001248:	f022 0204 	bicne.w	r2, r2, #4
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	4770      	bx	lr
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001254:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001256:	f7ff fbc5 	bl	80009e4 <HAL_SYSTICK_Callback>
 800125a:	bd08      	pop	{r3, pc}

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001260:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001262:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001264:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001414 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001268:	4a68      	ldr	r2, [pc, #416]	; (800140c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001418 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001270:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001272:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001276:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001278:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001280:	45b6      	cmp	lr, r6
 8001282:	f040 80ae 	bne.w	80013e2 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001286:	684c      	ldr	r4, [r1, #4]
 8001288:	f024 0710 	bic.w	r7, r4, #16
 800128c:	2f02      	cmp	r7, #2
 800128e:	d116      	bne.n	80012be <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001290:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001294:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001298:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800129c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80012a4:	f04f 0c0f 	mov.w	ip, #15
 80012a8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80012ac:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b0:	690d      	ldr	r5, [r1, #16]
 80012b2:	fa05 f50b 	lsl.w	r5, r5, fp
 80012b6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80012ba:	f8ca 5020 	str.w	r5, [sl, #32]
 80012be:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012c2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80012c4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012c8:	fa05 f50a 	lsl.w	r5, r5, sl
 80012cc:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ce:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012da:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012dc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80012e2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e6:	d811      	bhi.n	800130c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80012e8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012ea:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ee:	68cf      	ldr	r7, [r1, #12]
 80012f0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80012f4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80012f8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80012fa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012fc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001300:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001304:	409f      	lsls	r7, r3
 8001306:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800130a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800130c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800130e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001310:	688f      	ldr	r7, [r1, #8]
 8001312:	fa07 f70a 	lsl.w	r7, r7, sl
 8001316:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001318:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800131a:	00e5      	lsls	r5, r4, #3
 800131c:	d561      	bpl.n	80013e2 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	f04f 0b00 	mov.w	fp, #0
 8001322:	f8cd b00c 	str.w	fp, [sp, #12]
 8001326:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132a:	4d39      	ldr	r5, [pc, #228]	; (8001410 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001330:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001334:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001338:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800133c:	9703      	str	r7, [sp, #12]
 800133e:	9f03      	ldr	r7, [sp, #12]
 8001340:	f023 0703 	bic.w	r7, r3, #3
 8001344:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001348:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800134c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001350:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001354:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001358:	f04f 0e0f 	mov.w	lr, #15
 800135c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001360:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001362:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001366:	d043      	beq.n	80013f0 <HAL_GPIO_Init+0x194>
 8001368:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800136c:	42a8      	cmp	r0, r5
 800136e:	d041      	beq.n	80013f4 <HAL_GPIO_Init+0x198>
 8001370:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001374:	42a8      	cmp	r0, r5
 8001376:	d03f      	beq.n	80013f8 <HAL_GPIO_Init+0x19c>
 8001378:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800137c:	42a8      	cmp	r0, r5
 800137e:	d03d      	beq.n	80013fc <HAL_GPIO_Init+0x1a0>
 8001380:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001384:	42a8      	cmp	r0, r5
 8001386:	d03b      	beq.n	8001400 <HAL_GPIO_Init+0x1a4>
 8001388:	4548      	cmp	r0, r9
 800138a:	d03b      	beq.n	8001404 <HAL_GPIO_Init+0x1a8>
 800138c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001390:	42a8      	cmp	r0, r5
 8001392:	d039      	beq.n	8001408 <HAL_GPIO_Init+0x1ac>
 8001394:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001398:	42a8      	cmp	r0, r5
 800139a:	bf14      	ite	ne
 800139c:	2508      	movne	r5, #8
 800139e:	2507      	moveq	r5, #7
 80013a0:	fa05 f50c 	lsl.w	r5, r5, ip
 80013a4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a8:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80013aa:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ae:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80013b2:	bf0c      	ite	eq
 80013b4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013b6:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80013b8:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80013ba:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013bc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80013c0:	bf0c      	ite	eq
 80013c2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013c4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80013c6:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c8:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ca:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80013ce:	bf0c      	ite	eq
 80013d0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013d2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80013d4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80013d6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80013da:	bf54      	ite	pl
 80013dc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80013de:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80013e0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	3301      	adds	r3, #1
 80013e4:	2b10      	cmp	r3, #16
 80013e6:	f47f af44 	bne.w	8001272 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80013ea:	b005      	add	sp, #20
 80013ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013f0:	465d      	mov	r5, fp
 80013f2:	e7d5      	b.n	80013a0 <HAL_GPIO_Init+0x144>
 80013f4:	2501      	movs	r5, #1
 80013f6:	e7d3      	b.n	80013a0 <HAL_GPIO_Init+0x144>
 80013f8:	2502      	movs	r5, #2
 80013fa:	e7d1      	b.n	80013a0 <HAL_GPIO_Init+0x144>
 80013fc:	2503      	movs	r5, #3
 80013fe:	e7cf      	b.n	80013a0 <HAL_GPIO_Init+0x144>
 8001400:	2504      	movs	r5, #4
 8001402:	e7cd      	b.n	80013a0 <HAL_GPIO_Init+0x144>
 8001404:	2505      	movs	r5, #5
 8001406:	e7cb      	b.n	80013a0 <HAL_GPIO_Init+0x144>
 8001408:	2506      	movs	r5, #6
 800140a:	e7c9      	b.n	80013a0 <HAL_GPIO_Init+0x144>
 800140c:	40013c00 	.word	0x40013c00
 8001410:	40020000 	.word	0x40020000
 8001414:	40023800 	.word	0x40023800
 8001418:	40021400 	.word	0x40021400

0800141c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800141c:	b10a      	cbz	r2, 8001422 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800141e:	6181      	str	r1, [r0, #24]
 8001420:	4770      	bx	lr
 8001422:	0409      	lsls	r1, r1, #16
 8001424:	e7fb      	b.n	800141e <HAL_GPIO_WritePin+0x2>
	...

08001428 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800142c:	4604      	mov	r4, r0
 800142e:	b918      	cbnz	r0, 8001438 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001430:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001432:	b002      	add	sp, #8
 8001434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001438:	6803      	ldr	r3, [r0, #0]
 800143a:	07dd      	lsls	r5, r3, #31
 800143c:	d410      	bmi.n	8001460 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	0798      	lsls	r0, r3, #30
 8001442:	d458      	bmi.n	80014f6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	071a      	lsls	r2, r3, #28
 8001448:	f100 809a 	bmi.w	8001580 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	075b      	lsls	r3, r3, #29
 8001450:	f100 80b8 	bmi.w	80015c4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001454:	69a2      	ldr	r2, [r4, #24]
 8001456:	2a00      	cmp	r2, #0
 8001458:	f040 8119 	bne.w	800168e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800145c:	2000      	movs	r0, #0
 800145e:	e7e8      	b.n	8001432 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001460:	4ba6      	ldr	r3, [pc, #664]	; (80016fc <HAL_RCC_OscConfig+0x2d4>)
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	f002 020c 	and.w	r2, r2, #12
 8001468:	2a04      	cmp	r2, #4
 800146a:	d007      	beq.n	800147c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001472:	2a08      	cmp	r2, #8
 8001474:	d10a      	bne.n	800148c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	0259      	lsls	r1, r3, #9
 800147a:	d507      	bpl.n	800148c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	4b9f      	ldr	r3, [pc, #636]	; (80016fc <HAL_RCC_OscConfig+0x2d4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	039a      	lsls	r2, r3, #14
 8001482:	d5dc      	bpl.n	800143e <HAL_RCC_OscConfig+0x16>
 8001484:	6863      	ldr	r3, [r4, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1d9      	bne.n	800143e <HAL_RCC_OscConfig+0x16>
 800148a:	e7d1      	b.n	8001430 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148c:	6863      	ldr	r3, [r4, #4]
 800148e:	4d9b      	ldr	r5, [pc, #620]	; (80016fc <HAL_RCC_OscConfig+0x2d4>)
 8001490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001494:	d111      	bne.n	80014ba <HAL_RCC_OscConfig+0x92>
 8001496:	682b      	ldr	r3, [r5, #0]
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800149e:	f7ff fc69 	bl	8000d74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4d96      	ldr	r5, [pc, #600]	; (80016fc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80014a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	682b      	ldr	r3, [r5, #0]
 80014a8:	039b      	lsls	r3, r3, #14
 80014aa:	d4c8      	bmi.n	800143e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fc62 	bl	8000d74 <HAL_GetTick>
 80014b0:	1b80      	subs	r0, r0, r6
 80014b2:	2864      	cmp	r0, #100	; 0x64
 80014b4:	d9f7      	bls.n	80014a6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80014b6:	2003      	movs	r0, #3
 80014b8:	e7bb      	b.n	8001432 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014be:	d104      	bne.n	80014ca <HAL_RCC_OscConfig+0xa2>
 80014c0:	682b      	ldr	r3, [r5, #0]
 80014c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c6:	602b      	str	r3, [r5, #0]
 80014c8:	e7e5      	b.n	8001496 <HAL_RCC_OscConfig+0x6e>
 80014ca:	682a      	ldr	r2, [r5, #0]
 80014cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014d0:	602a      	str	r2, [r5, #0]
 80014d2:	682a      	ldr	r2, [r5, #0]
 80014d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014d8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1df      	bne.n	800149e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80014de:	f7ff fc49 	bl	8000d74 <HAL_GetTick>
 80014e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	039f      	lsls	r7, r3, #14
 80014e8:	d5a9      	bpl.n	800143e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ea:	f7ff fc43 	bl	8000d74 <HAL_GetTick>
 80014ee:	1b80      	subs	r0, r0, r6
 80014f0:	2864      	cmp	r0, #100	; 0x64
 80014f2:	d9f7      	bls.n	80014e4 <HAL_RCC_OscConfig+0xbc>
 80014f4:	e7df      	b.n	80014b6 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014f6:	4b81      	ldr	r3, [pc, #516]	; (80016fc <HAL_RCC_OscConfig+0x2d4>)
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	f012 0f0c 	tst.w	r2, #12
 80014fe:	d007      	beq.n	8001510 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001506:	2a08      	cmp	r2, #8
 8001508:	d111      	bne.n	800152e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	025e      	lsls	r6, r3, #9
 800150e:	d40e      	bmi.n	800152e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001510:	4b7a      	ldr	r3, [pc, #488]	; (80016fc <HAL_RCC_OscConfig+0x2d4>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	0795      	lsls	r5, r2, #30
 8001516:	d502      	bpl.n	800151e <HAL_RCC_OscConfig+0xf6>
 8001518:	68e2      	ldr	r2, [r4, #12]
 800151a:	2a01      	cmp	r2, #1
 800151c:	d188      	bne.n	8001430 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	6921      	ldr	r1, [r4, #16]
 8001522:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001526:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800152a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152c:	e78a      	b.n	8001444 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800152e:	68e2      	ldr	r2, [r4, #12]
 8001530:	4b73      	ldr	r3, [pc, #460]	; (8001700 <HAL_RCC_OscConfig+0x2d8>)
 8001532:	b1b2      	cbz	r2, 8001562 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001534:	2201      	movs	r2, #1
 8001536:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001538:	f7ff fc1c 	bl	8000d74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153c:	4d6f      	ldr	r5, [pc, #444]	; (80016fc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800153e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	682b      	ldr	r3, [r5, #0]
 8001542:	0798      	lsls	r0, r3, #30
 8001544:	d507      	bpl.n	8001556 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001546:	682b      	ldr	r3, [r5, #0]
 8001548:	6922      	ldr	r2, [r4, #16]
 800154a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800154e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001552:	602b      	str	r3, [r5, #0]
 8001554:	e776      	b.n	8001444 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001556:	f7ff fc0d 	bl	8000d74 <HAL_GetTick>
 800155a:	1b80      	subs	r0, r0, r6
 800155c:	2802      	cmp	r0, #2
 800155e:	d9ef      	bls.n	8001540 <HAL_RCC_OscConfig+0x118>
 8001560:	e7a9      	b.n	80014b6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001562:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001564:	f7ff fc06 	bl	8000d74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001568:	4d64      	ldr	r5, [pc, #400]	; (80016fc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800156a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156c:	682b      	ldr	r3, [r5, #0]
 800156e:	0799      	lsls	r1, r3, #30
 8001570:	f57f af68 	bpl.w	8001444 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fbfe 	bl	8000d74 <HAL_GetTick>
 8001578:	1b80      	subs	r0, r0, r6
 800157a:	2802      	cmp	r0, #2
 800157c:	d9f6      	bls.n	800156c <HAL_RCC_OscConfig+0x144>
 800157e:	e79a      	b.n	80014b6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001580:	6962      	ldr	r2, [r4, #20]
 8001582:	4b60      	ldr	r3, [pc, #384]	; (8001704 <HAL_RCC_OscConfig+0x2dc>)
 8001584:	b17a      	cbz	r2, 80015a6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800158a:	f7ff fbf3 	bl	8000d74 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158e:	4d5b      	ldr	r5, [pc, #364]	; (80016fc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001590:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001592:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001594:	079f      	lsls	r7, r3, #30
 8001596:	f53f af59 	bmi.w	800144c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159a:	f7ff fbeb 	bl	8000d74 <HAL_GetTick>
 800159e:	1b80      	subs	r0, r0, r6
 80015a0:	2802      	cmp	r0, #2
 80015a2:	d9f6      	bls.n	8001592 <HAL_RCC_OscConfig+0x16a>
 80015a4:	e787      	b.n	80014b6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80015a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015a8:	f7ff fbe4 	bl	8000d74 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	4d53      	ldr	r5, [pc, #332]	; (80016fc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80015ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015b2:	0798      	lsls	r0, r3, #30
 80015b4:	f57f af4a 	bpl.w	800144c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b8:	f7ff fbdc 	bl	8000d74 <HAL_GetTick>
 80015bc:	1b80      	subs	r0, r0, r6
 80015be:	2802      	cmp	r0, #2
 80015c0:	d9f6      	bls.n	80015b0 <HAL_RCC_OscConfig+0x188>
 80015c2:	e778      	b.n	80014b6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c4:	4b4d      	ldr	r3, [pc, #308]	; (80016fc <HAL_RCC_OscConfig+0x2d4>)
 80015c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015c8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80015cc:	d128      	bne.n	8001620 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	9201      	str	r2, [sp, #4]
 80015d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	9301      	str	r3, [sp, #4]
 80015e0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015e2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	4d48      	ldr	r5, [pc, #288]	; (8001708 <HAL_RCC_OscConfig+0x2e0>)
 80015e6:	682b      	ldr	r3, [r5, #0]
 80015e8:	05d9      	lsls	r1, r3, #23
 80015ea:	d51b      	bpl.n	8001624 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ec:	68a3      	ldr	r3, [r4, #8]
 80015ee:	4d43      	ldr	r5, [pc, #268]	; (80016fc <HAL_RCC_OscConfig+0x2d4>)
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d127      	bne.n	8001644 <HAL_RCC_OscConfig+0x21c>
 80015f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80015fc:	f7ff fbba 	bl	8000d74 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001600:	4d3e      	ldr	r5, [pc, #248]	; (80016fc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001602:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001608:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800160a:	079b      	lsls	r3, r3, #30
 800160c:	d539      	bpl.n	8001682 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800160e:	2e00      	cmp	r6, #0
 8001610:	f43f af20 	beq.w	8001454 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001614:	4a39      	ldr	r2, [pc, #228]	; (80016fc <HAL_RCC_OscConfig+0x2d4>)
 8001616:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	e719      	b.n	8001454 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001620:	2600      	movs	r6, #0
 8001622:	e7df      	b.n	80015e4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001624:	682b      	ldr	r3, [r5, #0]
 8001626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800162c:	f7ff fba2 	bl	8000d74 <HAL_GetTick>
 8001630:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	682b      	ldr	r3, [r5, #0]
 8001634:	05da      	lsls	r2, r3, #23
 8001636:	d4d9      	bmi.n	80015ec <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001638:	f7ff fb9c 	bl	8000d74 <HAL_GetTick>
 800163c:	1bc0      	subs	r0, r0, r7
 800163e:	2802      	cmp	r0, #2
 8001640:	d9f7      	bls.n	8001632 <HAL_RCC_OscConfig+0x20a>
 8001642:	e738      	b.n	80014b6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001644:	2b05      	cmp	r3, #5
 8001646:	d104      	bne.n	8001652 <HAL_RCC_OscConfig+0x22a>
 8001648:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	672b      	str	r3, [r5, #112]	; 0x70
 8001650:	e7d0      	b.n	80015f4 <HAL_RCC_OscConfig+0x1cc>
 8001652:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	672a      	str	r2, [r5, #112]	; 0x70
 800165a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800165c:	f022 0204 	bic.w	r2, r2, #4
 8001660:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1ca      	bne.n	80015fc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001666:	f7ff fb85 	bl	8000d74 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800166e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001670:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001672:	0798      	lsls	r0, r3, #30
 8001674:	d5cb      	bpl.n	800160e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f7ff fb7d 	bl	8000d74 <HAL_GetTick>
 800167a:	1bc0      	subs	r0, r0, r7
 800167c:	4540      	cmp	r0, r8
 800167e:	d9f7      	bls.n	8001670 <HAL_RCC_OscConfig+0x248>
 8001680:	e719      	b.n	80014b6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7ff fb77 	bl	8000d74 <HAL_GetTick>
 8001686:	1bc0      	subs	r0, r0, r7
 8001688:	4540      	cmp	r0, r8
 800168a:	d9bd      	bls.n	8001608 <HAL_RCC_OscConfig+0x1e0>
 800168c:	e713      	b.n	80014b6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800168e:	4d1b      	ldr	r5, [pc, #108]	; (80016fc <HAL_RCC_OscConfig+0x2d4>)
 8001690:	68ab      	ldr	r3, [r5, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b08      	cmp	r3, #8
 8001698:	f43f aeca 	beq.w	8001430 <HAL_RCC_OscConfig+0x8>
 800169c:	4e1b      	ldr	r6, [pc, #108]	; (800170c <HAL_RCC_OscConfig+0x2e4>)
 800169e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80016a2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a4:	d134      	bne.n	8001710 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80016a6:	f7ff fb65 	bl	8000d74 <HAL_GetTick>
 80016aa:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ac:	682b      	ldr	r3, [r5, #0]
 80016ae:	0199      	lsls	r1, r3, #6
 80016b0:	d41e      	bmi.n	80016f0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016b2:	6a22      	ldr	r2, [r4, #32]
 80016b4:	69e3      	ldr	r3, [r4, #28]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016ba:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80016be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c6:	4c0d      	ldr	r4, [pc, #52]	; (80016fc <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016c8:	0852      	lsrs	r2, r2, #1
 80016ca:	3a01      	subs	r2, #1
 80016cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80016d0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80016d2:	2301      	movs	r3, #1
 80016d4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80016d6:	f7ff fb4d 	bl	8000d74 <HAL_GetTick>
 80016da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	019a      	lsls	r2, r3, #6
 80016e0:	f53f aebc 	bmi.w	800145c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e4:	f7ff fb46 	bl	8000d74 <HAL_GetTick>
 80016e8:	1b40      	subs	r0, r0, r5
 80016ea:	2802      	cmp	r0, #2
 80016ec:	d9f6      	bls.n	80016dc <HAL_RCC_OscConfig+0x2b4>
 80016ee:	e6e2      	b.n	80014b6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff fb40 	bl	8000d74 <HAL_GetTick>
 80016f4:	1bc0      	subs	r0, r0, r7
 80016f6:	2802      	cmp	r0, #2
 80016f8:	d9d8      	bls.n	80016ac <HAL_RCC_OscConfig+0x284>
 80016fa:	e6dc      	b.n	80014b6 <HAL_RCC_OscConfig+0x8e>
 80016fc:	40023800 	.word	0x40023800
 8001700:	42470000 	.word	0x42470000
 8001704:	42470e80 	.word	0x42470e80
 8001708:	40007000 	.word	0x40007000
 800170c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001710:	f7ff fb30 	bl	8000d74 <HAL_GetTick>
 8001714:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	682b      	ldr	r3, [r5, #0]
 8001718:	019b      	lsls	r3, r3, #6
 800171a:	f57f ae9f 	bpl.w	800145c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171e:	f7ff fb29 	bl	8000d74 <HAL_GetTick>
 8001722:	1b00      	subs	r0, r0, r4
 8001724:	2802      	cmp	r0, #2
 8001726:	d9f6      	bls.n	8001716 <HAL_RCC_OscConfig+0x2ee>
 8001728:	e6c5      	b.n	80014b6 <HAL_RCC_OscConfig+0x8e>
 800172a:	bf00      	nop

0800172c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800172c:	4913      	ldr	r1, [pc, #76]	; (800177c <HAL_RCC_GetSysClockFreq+0x50>)
{
 800172e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001730:	688b      	ldr	r3, [r1, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b04      	cmp	r3, #4
 8001738:	d003      	beq.n	8001742 <HAL_RCC_GetSysClockFreq+0x16>
 800173a:	2b08      	cmp	r3, #8
 800173c:	d003      	beq.n	8001746 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800173e:	4810      	ldr	r0, [pc, #64]	; (8001780 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001740:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001742:	4810      	ldr	r0, [pc, #64]	; (8001784 <HAL_RCC_GetSysClockFreq+0x58>)
 8001744:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001746:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001748:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800174c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001750:	bf14      	ite	ne
 8001752:	480c      	ldrne	r0, [pc, #48]	; (8001784 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001754:	480a      	ldreq	r0, [pc, #40]	; (8001780 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001756:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800175a:	bf18      	it	ne
 800175c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800175e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001762:	fba1 0100 	umull	r0, r1, r1, r0
 8001766:	f7fe fd2f 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <HAL_RCC_GetSysClockFreq+0x50>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001772:	3301      	adds	r3, #1
 8001774:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001776:	fbb0 f0f3 	udiv	r0, r0, r3
 800177a:	bd08      	pop	{r3, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	00f42400 	.word	0x00f42400
 8001784:	007a1200 	.word	0x007a1200

08001788 <HAL_RCC_ClockConfig>:
{
 8001788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800178c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800178e:	4604      	mov	r4, r0
 8001790:	b910      	cbnz	r0, 8001798 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001792:	2001      	movs	r0, #1
 8001794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001798:	4b44      	ldr	r3, [pc, #272]	; (80018ac <HAL_RCC_ClockConfig+0x124>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	f002 020f 	and.w	r2, r2, #15
 80017a0:	428a      	cmp	r2, r1
 80017a2:	d328      	bcc.n	80017f6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	6821      	ldr	r1, [r4, #0]
 80017a6:	078f      	lsls	r7, r1, #30
 80017a8:	d42d      	bmi.n	8001806 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	07c8      	lsls	r0, r1, #31
 80017ac:	d440      	bmi.n	8001830 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ae:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <HAL_RCC_ClockConfig+0x124>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	f002 020f 	and.w	r2, r2, #15
 80017b6:	4295      	cmp	r5, r2
 80017b8:	d366      	bcc.n	8001888 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ba:	6822      	ldr	r2, [r4, #0]
 80017bc:	0751      	lsls	r1, r2, #29
 80017be:	d46c      	bmi.n	800189a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c0:	0713      	lsls	r3, r2, #28
 80017c2:	d507      	bpl.n	80017d4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017c4:	4a3a      	ldr	r2, [pc, #232]	; (80018b0 <HAL_RCC_ClockConfig+0x128>)
 80017c6:	6921      	ldr	r1, [r4, #16]
 80017c8:	6893      	ldr	r3, [r2, #8]
 80017ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80017ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017d2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017d4:	f7ff ffaa 	bl	800172c <HAL_RCC_GetSysClockFreq>
 80017d8:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <HAL_RCC_ClockConfig+0x128>)
 80017da:	4a36      	ldr	r2, [pc, #216]	; (80018b4 <HAL_RCC_ClockConfig+0x12c>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80017e2:	5cd3      	ldrb	r3, [r2, r3]
 80017e4:	40d8      	lsrs	r0, r3
 80017e6:	4b34      	ldr	r3, [pc, #208]	; (80018b8 <HAL_RCC_ClockConfig+0x130>)
 80017e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff fa78 	bl	8000ce0 <HAL_InitTick>
  return HAL_OK;
 80017f0:	2000      	movs	r0, #0
 80017f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	b2ca      	uxtb	r2, r1
 80017f8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	4299      	cmp	r1, r3
 8001802:	d1c6      	bne.n	8001792 <HAL_RCC_ClockConfig+0xa>
 8001804:	e7ce      	b.n	80017a4 <HAL_RCC_ClockConfig+0x1c>
 8001806:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800180c:	bf1e      	ittt	ne
 800180e:	689a      	ldrne	r2, [r3, #8]
 8001810:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001814:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001816:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001818:	bf42      	ittt	mi
 800181a:	689a      	ldrmi	r2, [r3, #8]
 800181c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001820:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	68a0      	ldr	r0, [r4, #8]
 8001826:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800182a:	4302      	orrs	r2, r0
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	e7bc      	b.n	80017aa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001830:	6862      	ldr	r2, [r4, #4]
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <HAL_RCC_ClockConfig+0x128>)
 8001834:	2a01      	cmp	r2, #1
 8001836:	d11d      	bne.n	8001874 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183e:	d0a8      	beq.n	8001792 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001840:	4e1b      	ldr	r6, [pc, #108]	; (80018b0 <HAL_RCC_ClockConfig+0x128>)
 8001842:	68b3      	ldr	r3, [r6, #8]
 8001844:	f023 0303 	bic.w	r3, r3, #3
 8001848:	4313      	orrs	r3, r2
 800184a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800184c:	f7ff fa92 	bl	8000d74 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001850:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001854:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	68b3      	ldr	r3, [r6, #8]
 8001858:	6862      	ldr	r2, [r4, #4]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001862:	d0a4      	beq.n	80017ae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001864:	f7ff fa86 	bl	8000d74 <HAL_GetTick>
 8001868:	1bc0      	subs	r0, r0, r7
 800186a:	4540      	cmp	r0, r8
 800186c:	d9f3      	bls.n	8001856 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800186e:	2003      	movs	r0, #3
}
 8001870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001874:	1e91      	subs	r1, r2, #2
 8001876:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001878:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187a:	d802      	bhi.n	8001882 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001880:	e7dd      	b.n	800183e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	f013 0f02 	tst.w	r3, #2
 8001886:	e7da      	b.n	800183e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001888:	b2ea      	uxtb	r2, r5
 800188a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	429d      	cmp	r5, r3
 8001894:	f47f af7d 	bne.w	8001792 <HAL_RCC_ClockConfig+0xa>
 8001898:	e78f      	b.n	80017ba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800189a:	4905      	ldr	r1, [pc, #20]	; (80018b0 <HAL_RCC_ClockConfig+0x128>)
 800189c:	68e0      	ldr	r0, [r4, #12]
 800189e:	688b      	ldr	r3, [r1, #8]
 80018a0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80018a4:	4303      	orrs	r3, r0
 80018a6:	608b      	str	r3, [r1, #8]
 80018a8:	e78a      	b.n	80017c0 <HAL_RCC_ClockConfig+0x38>
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00
 80018b0:	40023800 	.word	0x40023800
 80018b4:	08001c77 	.word	0x08001c77
 80018b8:	20000020 	.word	0x20000020

080018bc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80018bc:	4b01      	ldr	r3, [pc, #4]	; (80018c4 <HAL_RCC_GetHCLKFreq+0x8>)
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000020 	.word	0x20000020

080018c8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_RCC_GetPCLK1Freq+0x14>)
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80018d2:	5cd3      	ldrb	r3, [r2, r3]
 80018d4:	4a03      	ldr	r2, [pc, #12]	; (80018e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80018d6:	6810      	ldr	r0, [r2, #0]
}
 80018d8:	40d8      	lsrs	r0, r3
 80018da:	4770      	bx	lr
 80018dc:	40023800 	.word	0x40023800
 80018e0:	08001c87 	.word	0x08001c87
 80018e4:	20000020 	.word	0x20000020

080018e8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <HAL_RCC_GetPCLK2Freq+0x14>)
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <HAL_RCC_GetPCLK2Freq+0x18>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80018f2:	5cd3      	ldrb	r3, [r2, r3]
 80018f4:	4a03      	ldr	r2, [pc, #12]	; (8001904 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80018f6:	6810      	ldr	r0, [r2, #0]
}
 80018f8:	40d8      	lsrs	r0, r3
 80018fa:	4770      	bx	lr
 80018fc:	40023800 	.word	0x40023800
 8001900:	08001c87 	.word	0x08001c87
 8001904:	20000020 	.word	0x20000020

08001908 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800190c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800190e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001910:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001912:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001914:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001918:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800191a:	6133      	str	r3, [r6, #16]
{
 800191c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800191e:	6883      	ldr	r3, [r0, #8]
 8001920:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001922:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001924:	4303      	orrs	r3, r0
 8001926:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001928:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800192c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800192e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001932:	430b      	orrs	r3, r1
 8001934:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001936:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001938:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800193a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800193c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001940:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001942:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001946:	6173      	str	r3, [r6, #20]
 8001948:	4b7a      	ldr	r3, [pc, #488]	; (8001b34 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800194a:	d17c      	bne.n	8001a46 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800194c:	429e      	cmp	r6, r3
 800194e:	d003      	beq.n	8001958 <UART_SetConfig+0x50>
 8001950:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001954:	429e      	cmp	r6, r3
 8001956:	d144      	bne.n	80019e2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001958:	f7ff ffc6 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 800195c:	2519      	movs	r5, #25
 800195e:	fb05 f300 	mul.w	r3, r5, r0
 8001962:	6860      	ldr	r0, [r4, #4]
 8001964:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001968:	0040      	lsls	r0, r0, #1
 800196a:	fbb3 f3f0 	udiv	r3, r3, r0
 800196e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001972:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001976:	f7ff ffb7 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 800197a:	6863      	ldr	r3, [r4, #4]
 800197c:	4368      	muls	r0, r5
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fbb0 f7f3 	udiv	r7, r0, r3
 8001984:	f7ff ffb0 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 8001988:	6863      	ldr	r3, [r4, #4]
 800198a:	4368      	muls	r0, r5
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001992:	fbb3 f3f9 	udiv	r3, r3, r9
 8001996:	fb09 7313 	mls	r3, r9, r3, r7
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	3332      	adds	r3, #50	; 0x32
 800199e:	fbb3 f3f9 	udiv	r3, r3, r9
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80019a8:	f7ff ff9e 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 80019ac:	6862      	ldr	r2, [r4, #4]
 80019ae:	4368      	muls	r0, r5
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	fbb0 faf2 	udiv	sl, r0, r2
 80019b6:	f7ff ff97 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80019ba:	6863      	ldr	r3, [r4, #4]
 80019bc:	4368      	muls	r0, r5
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80019c8:	fb09 a313 	mls	r3, r9, r3, sl
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	3332      	adds	r3, #50	; 0x32
 80019d0:	fbb3 f3f9 	udiv	r3, r3, r9
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80019da:	443b      	add	r3, r7
 80019dc:	60b3      	str	r3, [r6, #8]
 80019de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80019e2:	f7ff ff71 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
 80019e6:	2519      	movs	r5, #25
 80019e8:	fb05 f300 	mul.w	r3, r5, r0
 80019ec:	6860      	ldr	r0, [r4, #4]
 80019ee:	f04f 0964 	mov.w	r9, #100	; 0x64
 80019f2:	0040      	lsls	r0, r0, #1
 80019f4:	fbb3 f3f0 	udiv	r3, r3, r0
 80019f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80019fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001a00:	f7ff ff62 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
 8001a04:	6863      	ldr	r3, [r4, #4]
 8001a06:	4368      	muls	r0, r5
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fbb0 f7f3 	udiv	r7, r0, r3
 8001a0e:	f7ff ff5b 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
 8001a12:	6863      	ldr	r3, [r4, #4]
 8001a14:	4368      	muls	r0, r5
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a20:	fb09 7313 	mls	r3, r9, r3, r7
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	3332      	adds	r3, #50	; 0x32
 8001a28:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001a32:	f7ff ff49 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
 8001a36:	6862      	ldr	r2, [r4, #4]
 8001a38:	4368      	muls	r0, r5
 8001a3a:	0052      	lsls	r2, r2, #1
 8001a3c:	fbb0 faf2 	udiv	sl, r0, r2
 8001a40:	f7ff ff42 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
 8001a44:	e7b9      	b.n	80019ba <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a46:	429e      	cmp	r6, r3
 8001a48:	d002      	beq.n	8001a50 <UART_SetConfig+0x148>
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <UART_SetConfig+0x230>)
 8001a4c:	429e      	cmp	r6, r3
 8001a4e:	d140      	bne.n	8001ad2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001a50:	f7ff ff4a 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 8001a54:	6867      	ldr	r7, [r4, #4]
 8001a56:	2519      	movs	r5, #25
 8001a58:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a5c:	fb05 f300 	mul.w	r3, r5, r0
 8001a60:	00bf      	lsls	r7, r7, #2
 8001a62:	fbb3 f3f7 	udiv	r3, r3, r7
 8001a66:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a6a:	011f      	lsls	r7, r3, #4
 8001a6c:	f7ff ff3c 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 8001a70:	6863      	ldr	r3, [r4, #4]
 8001a72:	4368      	muls	r0, r5
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	fbb0 f8f3 	udiv	r8, r0, r3
 8001a7a:	f7ff ff35 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 8001a7e:	6863      	ldr	r3, [r4, #4]
 8001a80:	4368      	muls	r0, r5
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a88:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a8c:	fb09 8313 	mls	r3, r9, r3, r8
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	3332      	adds	r3, #50	; 0x32
 8001a94:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a98:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001a9c:	f7ff ff24 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 8001aa0:	6862      	ldr	r2, [r4, #4]
 8001aa2:	4368      	muls	r0, r5
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	fbb0 faf2 	udiv	sl, r0, r2
 8001aaa:	f7ff ff1d 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001aae:	6863      	ldr	r3, [r4, #4]
 8001ab0:	4368      	muls	r0, r5
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001abc:	fb09 a313 	mls	r3, r9, r3, sl
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	3332      	adds	r3, #50	; 0x32
 8001ac4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	ea43 0308 	orr.w	r3, r3, r8
 8001ad0:	e783      	b.n	80019da <UART_SetConfig+0xd2>
 8001ad2:	f7ff fef9 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
 8001ad6:	6867      	ldr	r7, [r4, #4]
 8001ad8:	2519      	movs	r5, #25
 8001ada:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ade:	fb05 f300 	mul.w	r3, r5, r0
 8001ae2:	00bf      	lsls	r7, r7, #2
 8001ae4:	fbb3 f3f7 	udiv	r3, r3, r7
 8001ae8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001aec:	011f      	lsls	r7, r3, #4
 8001aee:	f7ff feeb 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
 8001af2:	6863      	ldr	r3, [r4, #4]
 8001af4:	4368      	muls	r0, r5
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	fbb0 f8f3 	udiv	r8, r0, r3
 8001afc:	f7ff fee4 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
 8001b00:	6863      	ldr	r3, [r4, #4]
 8001b02:	4368      	muls	r0, r5
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b0e:	fb09 8313 	mls	r3, r9, r3, r8
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	3332      	adds	r3, #50	; 0x32
 8001b16:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b1a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001b1e:	f7ff fed3 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
 8001b22:	6862      	ldr	r2, [r4, #4]
 8001b24:	4368      	muls	r0, r5
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	fbb0 faf2 	udiv	sl, r0, r2
 8001b2c:	f7ff fecc 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
 8001b30:	e7bd      	b.n	8001aae <UART_SetConfig+0x1a6>
 8001b32:	bf00      	nop
 8001b34:	40011000 	.word	0x40011000
 8001b38:	40011400 	.word	0x40011400

08001b3c <HAL_UART_Init>:
{
 8001b3c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001b3e:	4604      	mov	r4, r0
 8001b40:	b340      	cbz	r0, 8001b94 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001b42:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b4a:	b91b      	cbnz	r3, 8001b54 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001b4c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001b50:	f7ff f89e 	bl	8000c90 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001b54:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001b56:	2324      	movs	r3, #36	; 0x24
 8001b58:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001b5c:	68d3      	ldr	r3, [r2, #12]
 8001b5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b62:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b64:	4620      	mov	r0, r4
 8001b66:	f7ff fecf 	bl	8001908 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b7a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b82:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b84:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001b86:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b88:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001b8a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001b8e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001b92:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b94:	2001      	movs	r0, #1
}
 8001b96:	bd10      	pop	{r4, pc}

08001b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b9e:	e003      	b.n	8001ba8 <LoopCopyDataInit>

08001ba0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ba2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ba4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ba6:	3104      	adds	r1, #4

08001ba8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ba8:	480b      	ldr	r0, [pc, #44]	; (8001bd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bb0:	d3f6      	bcc.n	8001ba0 <CopyDataInit>
  ldr  r2, =_sbss
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bb4:	e002      	b.n	8001bbc <LoopFillZerobss>

08001bb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bb8:	f842 3b04 	str.w	r3, [r2], #4

08001bbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bc0:	d3f9      	bcc.n	8001bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bc2:	f7ff f81f 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f000 f811 	bl	8001bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bca:	f7fe ff71 	bl	8000ab0 <main>
  bx  lr    
 8001bce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bd4:	08001cb4 	.word	0x08001cb4
  ldr  r0, =_sdata
 8001bd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bdc:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8001be0:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8001be4:	20000120 	.word	0x20000120

08001be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC_IRQHandler>
	...

08001bec <__libc_init_array>:
 8001bec:	b570      	push	{r4, r5, r6, lr}
 8001bee:	4e0d      	ldr	r6, [pc, #52]	; (8001c24 <__libc_init_array+0x38>)
 8001bf0:	4c0d      	ldr	r4, [pc, #52]	; (8001c28 <__libc_init_array+0x3c>)
 8001bf2:	1ba4      	subs	r4, r4, r6
 8001bf4:	10a4      	asrs	r4, r4, #2
 8001bf6:	2500      	movs	r5, #0
 8001bf8:	42a5      	cmp	r5, r4
 8001bfa:	d109      	bne.n	8001c10 <__libc_init_array+0x24>
 8001bfc:	4e0b      	ldr	r6, [pc, #44]	; (8001c2c <__libc_init_array+0x40>)
 8001bfe:	4c0c      	ldr	r4, [pc, #48]	; (8001c30 <__libc_init_array+0x44>)
 8001c00:	f000 f818 	bl	8001c34 <_init>
 8001c04:	1ba4      	subs	r4, r4, r6
 8001c06:	10a4      	asrs	r4, r4, #2
 8001c08:	2500      	movs	r5, #0
 8001c0a:	42a5      	cmp	r5, r4
 8001c0c:	d105      	bne.n	8001c1a <__libc_init_array+0x2e>
 8001c0e:	bd70      	pop	{r4, r5, r6, pc}
 8001c10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c14:	4798      	blx	r3
 8001c16:	3501      	adds	r5, #1
 8001c18:	e7ee      	b.n	8001bf8 <__libc_init_array+0xc>
 8001c1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c1e:	4798      	blx	r3
 8001c20:	3501      	adds	r5, #1
 8001c22:	e7f2      	b.n	8001c0a <__libc_init_array+0x1e>
 8001c24:	08001cac 	.word	0x08001cac
 8001c28:	08001cac 	.word	0x08001cac
 8001c2c:	08001cac 	.word	0x08001cac
 8001c30:	08001cb0 	.word	0x08001cb0

08001c34 <_init>:
 8001c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c36:	bf00      	nop
 8001c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c3a:	bc08      	pop	{r3}
 8001c3c:	469e      	mov	lr, r3
 8001c3e:	4770      	bx	lr

08001c40 <_fini>:
 8001c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c42:	bf00      	nop
 8001c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c46:	bc08      	pop	{r3}
 8001c48:	469e      	mov	lr, r3
 8001c4a:	4770      	bx	lr
