
disp1602_menu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001788  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001910  08001910  00011910  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001958  08001958  00011958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001960  08001960  00011960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001964  08001964  00011964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000a8  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000b4  200000b4  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010691  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000025c8  00000000  00000000  000306cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002b4b  00000000  00000000  00032c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000660  00000000  00000000  000357e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000718  00000000  00000000  00035e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003f8e  00000000  00000000  00036558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000027c4  00000000  00000000  0003a4e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003ccaa  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000ff8  00000000  00000000  0003cd28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080018f8 	.word	0x080018f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080018f8 	.word	0x080018f8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <lcd_init>:
#include "main.h"
#include "lcd_interface.h"

void lcd_init()
{
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004de:	4801      	ldr	r0, [pc, #4]	; (80004e4 <lcd_init+0xc>)
 80004e0:	f000 bdfe 	b.w	80010e0 <HAL_GPIO_WritePin>
 80004e4:	40020800 	.word	0x40020800

080004e8 <lcd_write>:
}

void lcd_write(uint8_t c)
{
 80004e8:	b570      	push	{r4, r5, r6, lr}
	// para escrever dados, RS_pin = 1
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 1);
 80004ea:	4e24      	ldr	r6, [pc, #144]	; (800057c <lcd_write+0x94>)

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (c & 0x01) > 0 ? 1 : 0);
 80004ec:	4c24      	ldr	r4, [pc, #144]	; (8000580 <lcd_write+0x98>)
{
 80004ee:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	4630      	mov	r0, r6
 80004f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f8:	f000 fdf2 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (c & 0x01) > 0 ? 1 : 0);
 80004fc:	f005 0201 	and.w	r2, r5, #1
 8000500:	4620      	mov	r0, r4
 8000502:	2101      	movs	r1, #1
 8000504:	f000 fdec 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (c & 0x02) > 0 ? 1 : 0);
 8000508:	f3c5 0240 	ubfx	r2, r5, #1, #1
 800050c:	4620      	mov	r0, r4
 800050e:	2102      	movs	r1, #2
 8000510:	f000 fde6 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (c & 0x04) > 0 ? 1 : 0);
 8000514:	f3c5 0280 	ubfx	r2, r5, #2, #1
 8000518:	4620      	mov	r0, r4
 800051a:	2104      	movs	r1, #4
 800051c:	f000 fde0 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (c & 0x08) > 0 ? 1 : 0);
 8000520:	f3c5 02c0 	ubfx	r2, r5, #3, #1
 8000524:	4620      	mov	r0, r4
 8000526:	2108      	movs	r1, #8
 8000528:	f000 fdda 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_GPIO_Port, DB4_Pin, (c & 0x10) > 0 ? 1 : 0);
 800052c:	f3c5 1200 	ubfx	r2, r5, #4, #1
 8000530:	4620      	mov	r0, r4
 8000532:	2110      	movs	r1, #16
 8000534:	f000 fdd4 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port, DB5_Pin, (c & 0x20) > 0 ? 1 : 0);
 8000538:	f3c5 1240 	ubfx	r2, r5, #5, #1
 800053c:	4620      	mov	r0, r4
 800053e:	2120      	movs	r1, #32
 8000540:	f000 fdce 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, (c & 0x40) > 0 ? 1 : 0);
 8000544:	f3c5 1280 	ubfx	r2, r5, #6, #1
 8000548:	4620      	mov	r0, r4
 800054a:	2140      	movs	r1, #64	; 0x40
 800054c:	f000 fdc8 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, (c & 0x80) > 0 ? 1 : 0);
 8000550:	09ea      	lsrs	r2, r5, #7
 8000552:	4620      	mov	r0, r4
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	f000 fdc3 	bl	80010e0 <HAL_GPIO_WritePin>

	// pulso no enable, para pegar a informacao nos pinos
	// precisaria de 43us no enable
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 1);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000560:	4630      	mov	r0, r6
 8000562:	f000 fdbd 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_Delay(2); // usaremos 1mili por enquanto
 8000566:	2002      	movs	r0, #2
 8000568:	f000 fb1e 	bl	8000ba8 <HAL_Delay>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 800056c:	4630      	mov	r0, r6
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 8000574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 8000578:	f000 bdb2 	b.w	80010e0 <HAL_GPIO_WritePin>
 800057c:	40020800 	.word	0x40020800
 8000580:	40020c00 	.word	0x40020c00

08000584 <lcd_cmd_write>:

void lcd_cmd_write(uint8_t c)
{
 8000584:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 0);
 8000586:	4e24      	ldr	r6, [pc, #144]	; (8000618 <lcd_cmd_write+0x94>)

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (c & 0x01) > 0 ? 1 : 0);
 8000588:	4c24      	ldr	r4, [pc, #144]	; (800061c <lcd_cmd_write+0x98>)
{
 800058a:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	4630      	mov	r0, r6
 8000590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000594:	f000 fda4 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (c & 0x01) > 0 ? 1 : 0);
 8000598:	f005 0201 	and.w	r2, r5, #1
 800059c:	4620      	mov	r0, r4
 800059e:	2101      	movs	r1, #1
 80005a0:	f000 fd9e 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (c & 0x02) > 0 ? 1 : 0);
 80005a4:	f3c5 0240 	ubfx	r2, r5, #1, #1
 80005a8:	4620      	mov	r0, r4
 80005aa:	2102      	movs	r1, #2
 80005ac:	f000 fd98 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (c & 0x04) > 0 ? 1 : 0);
 80005b0:	f3c5 0280 	ubfx	r2, r5, #2, #1
 80005b4:	4620      	mov	r0, r4
 80005b6:	2104      	movs	r1, #4
 80005b8:	f000 fd92 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (c & 0x08) > 0 ? 1 : 0);
 80005bc:	f3c5 02c0 	ubfx	r2, r5, #3, #1
 80005c0:	4620      	mov	r0, r4
 80005c2:	2108      	movs	r1, #8
 80005c4:	f000 fd8c 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_GPIO_Port, DB4_Pin, (c & 0x10) > 0 ? 1 : 0);
 80005c8:	f3c5 1200 	ubfx	r2, r5, #4, #1
 80005cc:	4620      	mov	r0, r4
 80005ce:	2110      	movs	r1, #16
 80005d0:	f000 fd86 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port, DB5_Pin, (c & 0x20) > 0 ? 1 : 0);
 80005d4:	f3c5 1240 	ubfx	r2, r5, #5, #1
 80005d8:	4620      	mov	r0, r4
 80005da:	2120      	movs	r1, #32
 80005dc:	f000 fd80 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, (c & 0x40) > 0 ? 1 : 0);
 80005e0:	f3c5 1280 	ubfx	r2, r5, #6, #1
 80005e4:	4620      	mov	r0, r4
 80005e6:	2140      	movs	r1, #64	; 0x40
 80005e8:	f000 fd7a 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, (c & 0x80) > 0 ? 1 : 0);
 80005ec:	09ea      	lsrs	r2, r5, #7
 80005ee:	4620      	mov	r0, r4
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	f000 fd75 	bl	80010e0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fc:	4630      	mov	r0, r6
 80005fe:	f000 fd6f 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_Delay(1); // usaremos 1mili por enquanto
 8000602:	2001      	movs	r0, #1
 8000604:	f000 fad0 	bl	8000ba8 <HAL_Delay>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 8000608:	4630      	mov	r0, r6
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 8000610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 8000614:	f000 bd64 	b.w	80010e0 <HAL_GPIO_WritePin>
 8000618:	40020800 	.word	0x40020800
 800061c:	40020c00 	.word	0x40020c00

08000620 <lcd_set_addr>:

void lcd_set_addr(uint8_t addr)
{
 8000620:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 0);
 8000622:	4e24      	ldr	r6, [pc, #144]	; (80006b4 <lcd_set_addr+0x94>)

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (addr & 0x01) > 0 ? 1 : 0);
 8000624:	4c24      	ldr	r4, [pc, #144]	; (80006b8 <lcd_set_addr+0x98>)
{
 8000626:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	4630      	mov	r0, r6
 800062c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000630:	f000 fd56 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (addr & 0x01) > 0 ? 1 : 0);
 8000634:	f005 0201 	and.w	r2, r5, #1
 8000638:	4620      	mov	r0, r4
 800063a:	2101      	movs	r1, #1
 800063c:	f000 fd50 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (addr & 0x02) > 0 ? 1 : 0);
 8000640:	f3c5 0240 	ubfx	r2, r5, #1, #1
 8000644:	4620      	mov	r0, r4
 8000646:	2102      	movs	r1, #2
 8000648:	f000 fd4a 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (addr & 0x04) > 0 ? 1 : 0);
 800064c:	f3c5 0280 	ubfx	r2, r5, #2, #1
 8000650:	4620      	mov	r0, r4
 8000652:	2104      	movs	r1, #4
 8000654:	f000 fd44 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (addr & 0x08) > 0 ? 1 : 0);
 8000658:	f3c5 02c0 	ubfx	r2, r5, #3, #1
 800065c:	4620      	mov	r0, r4
 800065e:	2108      	movs	r1, #8
 8000660:	f000 fd3e 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_GPIO_Port, DB4_Pin, (addr & 0x10) > 0 ? 1 : 0);
 8000664:	f3c5 1200 	ubfx	r2, r5, #4, #1
 8000668:	4620      	mov	r0, r4
 800066a:	2110      	movs	r1, #16
 800066c:	f000 fd38 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port, DB5_Pin, (addr & 0x20) > 0 ? 1 : 0);
 8000670:	f3c5 1240 	ubfx	r2, r5, #5, #1
 8000674:	4620      	mov	r0, r4
 8000676:	2120      	movs	r1, #32
 8000678:	f000 fd32 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, (addr & 0x40) > 0 ? 1 : 0);
 800067c:	f3c5 1280 	ubfx	r2, r5, #6, #1
 8000680:	4620      	mov	r0, r4
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	f000 fd2c 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, 1);
 8000688:	4620      	mov	r0, r4
 800068a:	2201      	movs	r2, #1
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	f000 fd27 	bl	80010e0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 1);
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000698:	4630      	mov	r0, r6
 800069a:	f000 fd21 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_Delay(1); // usaremos 1mili por enquanto
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 fa82 	bl	8000ba8 <HAL_Delay>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 80006a4:	4630      	mov	r0, r6
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 80006ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 80006b0:	f000 bd16 	b.w	80010e0 <HAL_GPIO_WritePin>
 80006b4:	40020800 	.word	0x40020800
 80006b8:	40020c00 	.word	0x40020c00

080006bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 80006be:	4813      	ldr	r0, [pc, #76]	; (800070c <MX_ADC1_Init+0x50>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_ADC1_Init+0x54>)
 80006c2:	2400      	movs	r4, #0
 80006c4:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_ADC1_Init+0x58>)
 80006ca:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 80006cc:	2301      	movs	r3, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ce:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006d0:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d2:	6184      	str	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d4:	6204      	str	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d6:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d8:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006da:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006dc:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006de:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e0:	f000 fa76 	bl	8000bd0 <HAL_ADC_Init>
 80006e4:	b118      	cbz	r0, 80006ee <MX_ADC1_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 80006e6:	2148      	movs	r1, #72	; 0x48
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <MX_ADC1_Init+0x5c>)
 80006ea:	f000 f95f 	bl	80009ac <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
 80006ee:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f0:	4669      	mov	r1, sp
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <MX_ADC1_Init+0x50>)
  sConfig.Channel = ADC_CHANNEL_0;
 80006f4:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 80006f6:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006f8:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fa:	f000 fb0d 	bl	8000d18 <HAL_ADC_ConfigChannel>
 80006fe:	b118      	cbz	r0, 8000708 <MX_ADC1_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000700:	2152      	movs	r1, #82	; 0x52
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_ADC1_Init+0x5c>)
 8000704:	f000 f952 	bl	80009ac <_Error_Handler>
  }

}
 8000708:	b004      	add	sp, #16
 800070a:	bd10      	pop	{r4, pc}
 800070c:	20000028 	.word	0x20000028
 8000710:	40012000 	.word	0x40012000
 8000714:	0f000001 	.word	0x0f000001
 8000718:	08001919 	.word	0x08001919

0800071c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800071c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 800071e:	6802      	ldr	r2, [r0, #0]
 8000720:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <HAL_ADC_MspInit+0x3c>)
 8000722:	429a      	cmp	r2, r3
 8000724:	d115      	bne.n	8000752 <HAL_ADC_MspInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000726:	2100      	movs	r1, #0
 8000728:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800072c:	9100      	str	r1, [sp, #0]
 800072e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	480a      	ldr	r0, [pc, #40]	; (800075c <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000736:	645a      	str	r2, [r3, #68]	; 0x44
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 800073c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000744:	2301      	movs	r3, #1
 8000746:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800074a:	2303      	movs	r3, #3
 800074c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f000 fbe7 	bl	8000f20 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000752:	b007      	add	sp, #28
 8000754:	f85d fb04 	ldr.w	pc, [sp], #4
 8000758:	40012000 	.word	0x40012000
 800075c:	40020000 	.word	0x40020000

08000760 <lcdInit>:
 *  Created on: 19 de mai de 2018
 *      Author: luis
 */
#include "display.h"

void lcdInit(LCD *lcd) {
 8000760:	b508      	push	{r3, lr}
	// limpa a memoria do display
	for (int i = 0; i < 16; i++) {
		lcd->Memory[0][i] = 0x20;
 8000762:	2220      	movs	r2, #32
 8000764:	1c43      	adds	r3, r0, #1
 8000766:	3011      	adds	r0, #17
 8000768:	f803 2b01 	strb.w	r2, [r3], #1
	for (int i = 0; i < 16; i++) {
 800076c:	4283      	cmp	r3, r0
		lcd->Memory[1][i] = 0x20;
 800076e:	73da      	strb	r2, [r3, #15]
	for (int i = 0; i < 16; i++) {
 8000770:	d1fa      	bne.n	8000768 <lcdInit+0x8>
	}

	lcd_init();
 8000772:	f7ff feb1 	bl	80004d8 <lcd_init>
	lcd_cmd_write(0x01); // clear display
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff ff04 	bl	8000584 <lcd_cmd_write>
	lcd_cmd_write(0x02); // return home
 800077c:	2002      	movs	r0, #2
 800077e:	f7ff ff01 	bl	8000584 <lcd_cmd_write>
	lcd_cmd_write(0x06); // entry mode set
 8000782:	2006      	movs	r0, #6
 8000784:	f7ff fefe 	bl	8000584 <lcd_cmd_write>
	lcd_cmd_write(0x0C); // display on/off control
 8000788:	200c      	movs	r0, #12
 800078a:	f7ff fefb 	bl	8000584 <lcd_cmd_write>
	lcd_cmd_write(0x14); // cursor or display shift
 800078e:	2014      	movs	r0, #20
 8000790:	f7ff fef8 	bl	8000584 <lcd_cmd_write>
	lcd_cmd_write(0x38); // function set
 8000794:	2038      	movs	r0, #56	; 0x38
 8000796:	f7ff fef5 	bl	8000584 <lcd_cmd_write>
	HAL_Delay(10); // 10 mili
 800079a:	200a      	movs	r0, #10
}
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(10); // 10 mili
 80007a0:	f000 ba02 	b.w	8000ba8 <HAL_Delay>

080007a4 <lcdWrite>:

	return 0;
}
#endif

void lcdWrite(LCD *lcd, char *string, uint8_t lin, uint8_t col) {
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	3901      	subs	r1, #1
	while (*string) {
 80007a8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80007ac:	b915      	cbnz	r5, 80007b4 <lcdWrite+0x10>
			col = 0;
		}
		lcd->Memory[lin][col++] = *string;
		string++;
	}
	lcd->NeedsRedraw = 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	7003      	strb	r3, [r0, #0]
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
		if (col == 16 && lin == 0) {
 80007b4:	2b10      	cmp	r3, #16
 80007b6:	d102      	bne.n	80007be <lcdWrite+0x1a>
 80007b8:	b90a      	cbnz	r2, 80007be <lcdWrite+0x1a>
			col = 0;
 80007ba:	4613      	mov	r3, r2
			lin = 1;
 80007bc:	2201      	movs	r2, #1
		lcd->Memory[lin][col++] = *string;
 80007be:	eb00 1402 	add.w	r4, r0, r2, lsl #4
 80007c2:	1c5e      	adds	r6, r3, #1
 80007c4:	4423      	add	r3, r4
 80007c6:	705d      	strb	r5, [r3, #1]
 80007c8:	b2f3      	uxtb	r3, r6
 80007ca:	e7ed      	b.n	80007a8 <lcdWrite+0x4>

080007cc <lcdRuntTime>:
}

void lcdRuntTime(LCD *lcd) {
 80007cc:	b570      	push	{r4, r5, r6, lr}
	if (lcd->NeedsRedraw == 1) {
 80007ce:	7803      	ldrb	r3, [r0, #0]
 80007d0:	2b01      	cmp	r3, #1
void lcdRuntTime(LCD *lcd) {
 80007d2:	4605      	mov	r5, r0
	if (lcd->NeedsRedraw == 1) {
 80007d4:	d118      	bne.n	8000808 <lcdRuntTime+0x3c>
		lcd_set_addr(0x00);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff ff22 	bl	8000620 <lcd_set_addr>
 80007dc:	1c6c      	adds	r4, r5, #1
 80007de:	f105 0611 	add.w	r6, r5, #17
		for (int i = 0; i < 16; i++) {
			lcd_write(lcd->Memory[0][i]);
 80007e2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80007e6:	f7ff fe7f 	bl	80004e8 <lcd_write>
		for (int i = 0; i < 16; i++) {
 80007ea:	42b4      	cmp	r4, r6
 80007ec:	d1f9      	bne.n	80007e2 <lcdRuntTime+0x16>
		}
		lcd_set_addr(0x40);
 80007ee:	2040      	movs	r0, #64	; 0x40
 80007f0:	f7ff ff16 	bl	8000620 <lcd_set_addr>
 80007f4:	f105 0621 	add.w	r6, r5, #33	; 0x21
		for (int i = 0; i < 16; i++) {

			lcd_write(lcd->Memory[1][i]);
 80007f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80007fc:	f7ff fe74 	bl	80004e8 <lcd_write>
		for (int i = 0; i < 16; i++) {
 8000800:	42a6      	cmp	r6, r4
 8000802:	d1f9      	bne.n	80007f8 <lcdRuntTime+0x2c>
		}

		lcd->NeedsRedraw = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	702b      	strb	r3, [r5, #0]
 8000808:	bd70      	pop	{r4, r5, r6, pc}
	...

0800080c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800080c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000810:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	2400      	movs	r4, #0
 8000814:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <MX_GPIO_Init+0xc4>)
 8000816:	9401      	str	r4, [sp, #4]
 8000818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 800081a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80008dc <MX_GPIO_Init+0xd0>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, E_Pin|RS_Pin, GPIO_PIN_RESET);
 800081e:	4f2d      	ldr	r7, [pc, #180]	; (80008d4 <MX_GPIO_Init+0xc8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin 
 8000820:	4e2d      	ldr	r6, [pc, #180]	; (80008d8 <MX_GPIO_Init+0xcc>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000826:	631a      	str	r2, [r3, #48]	; 0x30
 8000828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800082a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800082e:	9201      	str	r2, [sp, #4]
 8000830:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	9402      	str	r4, [sp, #8]
 8000834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000836:	f042 0201 	orr.w	r2, r2, #1
 800083a:	631a      	str	r2, [r3, #48]	; 0x30
 800083c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800083e:	f002 0201 	and.w	r2, r2, #1
 8000842:	9202      	str	r2, [sp, #8]
 8000844:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	9403      	str	r4, [sp, #12]
 8000848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800084a:	f042 0204 	orr.w	r2, r2, #4
 800084e:	631a      	str	r2, [r3, #48]	; 0x30
 8000850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000852:	f002 0204 	and.w	r2, r2, #4
 8000856:	9203      	str	r2, [sp, #12]
 8000858:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085a:	9404      	str	r4, [sp, #16]
 800085c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800085e:	f042 0208 	orr.w	r2, r2, #8
 8000862:	631a      	str	r2, [r3, #48]	; 0x30
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 800086c:	4622      	mov	r2, r4
 800086e:	4640      	mov	r0, r8
 8000870:	2102      	movs	r1, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8000874:	f000 fc34 	bl	80010e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, E_Pin|RS_Pin, GPIO_PIN_RESET);
 8000878:	4622      	mov	r2, r4
 800087a:	4638      	mov	r0, r7
 800087c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000880:	f000 fc2e 	bl	80010e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin 
 8000884:	4622      	mov	r2, r4
 8000886:	4630      	mov	r0, r6
 8000888:	21ff      	movs	r1, #255	; 0xff
 800088a:	f000 fc29 	bl	80010e0 <HAL_GPIO_WritePin>
                          |DB4_Pin|DB5_Pin|DB6_Pin|DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8000890:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8000892:	a905      	add	r1, sp, #20
 8000894:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8000896:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 800089e:	f000 fb3f 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = E_Pin|RS_Pin;
 80008a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a6:	a905      	add	r1, sp, #20
 80008a8:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = E_Pin|RS_Pin;
 80008aa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b2:	f000 fb35 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin 
 80008b6:	23ff      	movs	r3, #255	; 0xff
                          |DB4_Pin|DB5_Pin|DB6_Pin|DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b8:	a905      	add	r1, sp, #20
 80008ba:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin 
 80008bc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c4:	f000 fb2c 	bl	8000f20 <HAL_GPIO_Init>

}
 80008c8:	b00a      	add	sp, #40	; 0x28
 80008ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020800 	.word	0x40020800
 80008d8:	40020c00 	.word	0x40020c00
 80008dc:	40020000 	.word	0x40020000

080008e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008e0:	b510      	push	{r4, lr}
 80008e2:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 80008e4:	2300      	movs	r3, #0
 80008e6:	4a21      	ldr	r2, [pc, #132]	; (800096c <SystemClock_Config+0x8c>)
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80008ec:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80008f0:	6411      	str	r1, [r2, #64]	; 0x40
 80008f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80008f4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80008f8:	9201      	str	r2, [sp, #4]
 80008fa:	9a01      	ldr	r2, [sp, #4]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fc:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <SystemClock_Config+0x90>)
 80008fe:	9302      	str	r3, [sp, #8]
 8000900:	6811      	ldr	r1, [r2, #0]
 8000902:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000906:	6011      	str	r1, [r2, #0]
 8000908:	6812      	ldr	r2, [r2, #0]
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800090a:	930e      	str	r3, [sp, #56]	; 0x38
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800090c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000910:	9202      	str	r2, [sp, #8]
 8000912:	9a02      	ldr	r2, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000914:	2202      	movs	r2, #2
 8000916:	9208      	str	r2, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000918:	2201      	movs	r2, #1
 800091a:	920b      	str	r2, [sp, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800091c:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800091e:	2210      	movs	r2, #16
 8000920:	920c      	str	r2, [sp, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000922:	f000 fbe3 	bl	80010ec <HAL_RCC_OscConfig>
 8000926:	4601      	mov	r1, r0
 8000928:	b100      	cbz	r0, 800092c <SystemClock_Config+0x4c>
 800092a:	e7fe      	b.n	800092a <SystemClock_Config+0x4a>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800092c:	230f      	movs	r3, #15
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800092e:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000930:	9005      	str	r0, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000932:	9006      	str	r0, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000934:	9007      	str	r0, [sp, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000936:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000938:	9303      	str	r3, [sp, #12]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800093a:	f000 fd87 	bl	800144c <HAL_RCC_ClockConfig>
 800093e:	4604      	mov	r4, r0
 8000940:	b100      	cbz	r0, 8000944 <SystemClock_Config+0x64>
 8000942:	e7fe      	b.n	8000942 <SystemClock_Config+0x62>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8000944:	f000 fe1c 	bl	8001580 <HAL_RCC_GetHCLKFreq>
 8000948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000950:	f000 fabe 	bl	8000ed0 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000954:	2004      	movs	r0, #4
 8000956:	f000 fad1 	bl	8000efc <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800095a:	4622      	mov	r2, r4
 800095c:	4621      	mov	r1, r4
 800095e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000962:	f000 fa81 	bl	8000e68 <HAL_NVIC_SetPriority>
}
 8000966:	b014      	add	sp, #80	; 0x50
 8000968:	bd10      	pop	{r4, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800
 8000970:	40007000 	.word	0x40007000

08000974 <main>:
int main(void) {
 8000974:	b500      	push	{lr}
 8000976:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 8000978:	f000 f8ea 	bl	8000b50 <HAL_Init>
	SystemClock_Config();
 800097c:	f7ff ffb0 	bl	80008e0 <SystemClock_Config>
	MX_GPIO_Init();
 8000980:	f7ff ff44 	bl	800080c <MX_GPIO_Init>
	MX_ADC1_Init();
 8000984:	f7ff fe9a 	bl	80006bc <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8000988:	f000 f876 	bl	8000a78 <MX_USART2_UART_Init>
	lcdInit(&lcd);
 800098c:	a801      	add	r0, sp, #4
 800098e:	f7ff fee7 	bl	8000760 <lcdInit>
	lcdWrite(&lcd, "Kunzler\0", 1, 4);
 8000992:	2304      	movs	r3, #4
 8000994:	2201      	movs	r2, #1
 8000996:	4904      	ldr	r1, [pc, #16]	; (80009a8 <main+0x34>)
 8000998:	eb0d 0003 	add.w	r0, sp, r3
 800099c:	f7ff ff02 	bl	80007a4 <lcdWrite>
		lcdRuntTime(&lcd);
 80009a0:	a801      	add	r0, sp, #4
 80009a2:	f7ff ff13 	bl	80007cc <lcdRuntTime>
 80009a6:	e7fb      	b.n	80009a0 <main+0x2c>
 80009a8:	08001910 	.word	0x08001910

080009ac <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 80009ac:	e7fe      	b.n	80009ac <_Error_Handler>

080009ae <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ae:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 fa47 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	4611      	mov	r1, r2
 80009ba:	f06f 000b 	mvn.w	r0, #11
 80009be:	f000 fa53 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	4611      	mov	r1, r2
 80009c6:	f06f 000a 	mvn.w	r0, #10
 80009ca:	f000 fa4d 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	4611      	mov	r1, r2
 80009d2:	f06f 0009 	mvn.w	r0, #9
 80009d6:	f000 fa47 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	4611      	mov	r1, r2
 80009de:	f06f 0004 	mvn.w	r0, #4
 80009e2:	f000 fa41 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	4611      	mov	r1, r2
 80009ea:	f06f 0003 	mvn.w	r0, #3
 80009ee:	f000 fa3b 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	4611      	mov	r1, r2
 80009f6:	f06f 0001 	mvn.w	r0, #1
 80009fa:	f000 fa35 	bl	8000e68 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	4611      	mov	r1, r2
 8000a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000a0a:	f000 ba2d 	b.w	8000e68 <HAL_NVIC_SetPriority>

08000a0e <NMI_Handler>:
 8000a0e:	4770      	bx	lr

08000a10 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000a10:	e7fe      	b.n	8000a10 <HardFault_Handler>

08000a12 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000a12:	e7fe      	b.n	8000a12 <MemManage_Handler>

08000a14 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000a14:	e7fe      	b.n	8000a14 <BusFault_Handler>

08000a16 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000a16:	e7fe      	b.n	8000a16 <UsageFault_Handler>

08000a18 <SVC_Handler>:
 8000a18:	4770      	bx	lr

08000a1a <DebugMon_Handler>:
 8000a1a:	4770      	bx	lr

08000a1c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000a1c:	4770      	bx	lr

08000a1e <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000a1e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a20:	f000 f8b0 	bl	8000b84 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000a28:	f000 ba75 	b.w	8000f16 <HAL_SYSTICK_IRQHandler>

08000a2c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a2c:	490f      	ldr	r1, [pc, #60]	; (8000a6c <SystemInit+0x40>)
 8000a2e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000a32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <SystemInit+0x44>)
 8000a3c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a3e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000a40:	f042 0201 	orr.w	r2, r2, #1
 8000a44:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000a46:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000a4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a52:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <SystemInit+0x48>)
 8000a56:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a5e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a60:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a66:	608b      	str	r3, [r1, #8]
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00
 8000a70:	40023800 	.word	0x40023800
 8000a74:	24003010 	.word	0x24003010

08000a78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a78:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USART2_UART_Init+0x38>)
 8000a7e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8000a82:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a86:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8e:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a90:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a96:	f000 feb3 	bl	8001800 <HAL_UART_Init>
 8000a9a:	b128      	cbz	r0, 8000aa8 <MX_USART2_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000a9c:	2142      	movs	r1, #66	; 0x42
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART2_UART_Init+0x3c>)
  }

}
 8000aa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000aa4:	f7ff bf82 	b.w	80009ac <_Error_Handler>
 8000aa8:	bd08      	pop	{r3, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000070 	.word	0x20000070
 8000ab0:	40004400 	.word	0x40004400
 8000ab4:	08001943 	.word	0x08001943

08000ab8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8000aba:	6802      	ldr	r2, [r0, #0]
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <HAL_UART_MspInit+0x44>)
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d119      	bne.n	8000af6 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	480e      	ldr	r0, [pc, #56]	; (8000b04 <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000acc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ad0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000adc:	230c      	movs	r3, #12
 8000ade:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aee:	2307      	movs	r3, #7
 8000af0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f000 fa15 	bl	8000f20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000af6:	b007      	add	sp, #28
 8000af8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000afc:	40004400 	.word	0x40004400
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020000 	.word	0x40020000

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_InitTick+0x3c>)
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_InitTick+0x40>)
{
 8000b0e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b10:	7818      	ldrb	r0, [r3, #0]
 8000b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b16:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b1a:	6810      	ldr	r0, [r2, #0]
 8000b1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b20:	f000 f9d6 	bl	8000ed0 <HAL_SYSTICK_Config>
 8000b24:	4604      	mov	r4, r0
 8000b26:	b958      	cbnz	r0, 8000b40 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b28:	2d0f      	cmp	r5, #15
 8000b2a:	d809      	bhi.n	8000b40 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4629      	mov	r1, r5
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b34:	f000 f998 	bl	8000e68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <HAL_InitTick+0x44>)
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	601d      	str	r5, [r3, #0]
 8000b3e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b40:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b42:	bd38      	pop	{r3, r4, r5, pc}
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000004 	.word	0x20000004
 8000b4c:	20000008 	.word	0x20000008

08000b50 <HAL_Init>:
{
 8000b50:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_Init+0x30>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b5a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b62:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b6a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f969 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff ffc8 	bl	8000b08 <HAL_InitTick>
  HAL_MspInit();
 8000b78:	f7ff ff19 	bl	80009ae <HAL_MspInit>
}
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	bd08      	pop	{r3, pc}
 8000b80:	40023c00 	.word	0x40023c00

08000b84 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b84:	4a03      	ldr	r2, [pc, #12]	; (8000b94 <HAL_IncTick+0x10>)
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <HAL_IncTick+0x14>)
 8000b88:	6811      	ldr	r1, [r2, #0]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	440b      	add	r3, r1
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	200000b0 	.word	0x200000b0
 8000b98:	20000004 	.word	0x20000004

08000b9c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b9c:	4b01      	ldr	r3, [pc, #4]	; (8000ba4 <HAL_GetTick+0x8>)
 8000b9e:	6818      	ldr	r0, [r3, #0]
}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200000b0 	.word	0x200000b0

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b538      	push	{r3, r4, r5, lr}
 8000baa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bac:	f7ff fff6 	bl	8000b9c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb2:	bf1c      	itt	ne
 8000bb4:	4b05      	ldrne	r3, [pc, #20]	; (8000bcc <HAL_Delay+0x24>)
 8000bb6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000bb8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000bba:	bf18      	it	ne
 8000bbc:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bbe:	f7ff ffed 	bl	8000b9c <HAL_GetTick>
 8000bc2:	1b40      	subs	r0, r0, r5
 8000bc4:	4284      	cmp	r4, r0
 8000bc6:	d8fa      	bhi.n	8000bbe <HAL_Delay+0x16>
  {
  }
}
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	f000 8099 	beq.w	8000d0c <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000bda:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000bdc:	b923      	cbnz	r3, 8000be8 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bde:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000be0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000be4:	f7ff fd9a 	bl	800071c <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000be8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bea:	06db      	lsls	r3, r3, #27
 8000bec:	f100 808c 	bmi.w	8000d08 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bf2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bf6:	f023 0302 	bic.w	r3, r3, #2
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c00:	4b43      	ldr	r3, [pc, #268]	; (8000d10 <HAL_ADC_Init+0x140>)
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000c08:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	6861      	ldr	r1, [r4, #4]
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c12:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c14:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c26:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c28:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c2a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c2e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	430a      	orrs	r2, r1
 8000c34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c36:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c38:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c46:	4933      	ldr	r1, [pc, #204]	; (8000d14 <HAL_ADC_Init+0x144>)
 8000c48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c4a:	428a      	cmp	r2, r1
 8000c4c:	d050      	beq.n	8000cf0 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c4e:	6899      	ldr	r1, [r3, #8]
 8000c50:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000c54:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000c56:	6899      	ldr	r1, [r3, #8]
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c5c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c6a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000c6c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000c6e:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000c70:	f022 0202 	bic.w	r2, r2, #2
 8000c74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000c7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000c7e:	6a22      	ldr	r2, [r4, #32]
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	d03d      	beq.n	8000d00 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000c84:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000c86:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000c88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c8c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000c94:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	3901      	subs	r1, #1
 8000c9a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000c9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ca2:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ca4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cac:	3901      	subs	r1, #1
 8000cae:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000cb4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000cb6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000cb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000cc4:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000cc6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000cc8:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000cd0:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000cd2:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000cd4:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000cd8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000cda:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000cdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cde:	f023 0303 	bic.w	r3, r3, #3
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000cee:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cfe:	e7b4      	b.n	8000c6a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d06:	e7ca      	b.n	8000c9e <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000d08:	2001      	movs	r0, #1
 8000d0a:	e7ed      	b.n	8000ce8 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000d0c:	2001      	movs	r0, #1
}
 8000d0e:	bd10      	pop	{r4, pc}
 8000d10:	40012300 	.word	0x40012300
 8000d14:	0f000001 	.word	0x0f000001

08000d18 <HAL_ADC_ConfigChannel>:
{
 8000d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000d1e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	f000 8083 	beq.w	8000e2e <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000d28:	680d      	ldr	r5, [r1, #0]
 8000d2a:	6804      	ldr	r4, [r0, #0]
 8000d2c:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000d2e:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000d30:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000d32:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000d36:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000d38:	d92a      	bls.n	8000d90 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000d3a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000d3e:	68e7      	ldr	r7, [r4, #12]
 8000d40:	3b1e      	subs	r3, #30
 8000d42:	f04f 0e07 	mov.w	lr, #7
 8000d46:	fa0e fe03 	lsl.w	lr, lr, r3
 8000d4a:	ea27 070e 	bic.w	r7, r7, lr
 8000d4e:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d50:	68e7      	ldr	r7, [r4, #12]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	433b      	orrs	r3, r7
 8000d58:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000d5a:	684a      	ldr	r2, [r1, #4]
 8000d5c:	2a06      	cmp	r2, #6
 8000d5e:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000d62:	d825      	bhi.n	8000db0 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000d64:	4413      	add	r3, r2
 8000d66:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000d68:	1f59      	subs	r1, r3, #5
 8000d6a:	231f      	movs	r3, #31
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	ea27 0303 	bic.w	r3, r7, r3
 8000d72:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000d74:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000d76:	fa06 f101 	lsl.w	r1, r6, r1
 8000d7a:	4311      	orrs	r1, r2
 8000d7c:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d7e:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <HAL_ADC_ConfigChannel+0x11c>)
 8000d80:	429c      	cmp	r4, r3
 8000d82:	d034      	beq.n	8000dee <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8000d84:	2300      	movs	r3, #0
 8000d86:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000d8a:	4618      	mov	r0, r3
}
 8000d8c:	b003      	add	sp, #12
 8000d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d90:	6927      	ldr	r7, [r4, #16]
 8000d92:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000d96:	f04f 0e07 	mov.w	lr, #7
 8000d9a:	fa0e fe03 	lsl.w	lr, lr, r3
 8000d9e:	ea27 070e 	bic.w	r7, r7, lr
 8000da2:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000da4:	6927      	ldr	r7, [r4, #16]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	433b      	orrs	r3, r7
 8000dac:	6123      	str	r3, [r4, #16]
 8000dae:	e7d4      	b.n	8000d5a <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8000db0:	2a0c      	cmp	r2, #12
 8000db2:	d80e      	bhi.n	8000dd2 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000db4:	4413      	add	r3, r2
 8000db6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000db8:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000dbc:	231f      	movs	r3, #31
 8000dbe:	4093      	lsls	r3, r2
 8000dc0:	ea21 0303 	bic.w	r3, r1, r3
 8000dc4:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000dc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000dc8:	fa06 f202 	lsl.w	r2, r6, r2
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	6322      	str	r2, [r4, #48]	; 0x30
 8000dd0:	e7d5      	b.n	8000d7e <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000dd2:	4413      	add	r3, r2
 8000dd4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000dd6:	3b41      	subs	r3, #65	; 0x41
 8000dd8:	221f      	movs	r2, #31
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	ea21 0202 	bic.w	r2, r1, r2
 8000de0:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000de2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000de4:	fa06 f103 	lsl.w	r1, r6, r3
 8000de8:	4311      	orrs	r1, r2
 8000dea:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000dec:	e7c7      	b.n	8000d7e <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000dee:	2d12      	cmp	r5, #18
 8000df0:	d104      	bne.n	8000dfc <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000df2:	4a11      	ldr	r2, [pc, #68]	; (8000e38 <HAL_ADC_ConfigChannel+0x120>)
 8000df4:	6853      	ldr	r3, [r2, #4]
 8000df6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dfa:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000dfc:	f1a5 0310 	sub.w	r3, r5, #16
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d8bf      	bhi.n	8000d84 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000e04:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <HAL_ADC_ConfigChannel+0x120>)
 8000e06:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e08:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000e0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e0e:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e10:	d1b8      	bne.n	8000d84 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_ADC_ConfigChannel+0x124>)
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_ADC_ConfigChannel+0x128>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	4353      	muls	r3, r2
        counter--;
 8000e20:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000e22:	9b01      	ldr	r3, [sp, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0ad      	beq.n	8000d84 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8000e28:	9b01      	ldr	r3, [sp, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	e7f8      	b.n	8000e20 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8000e2e:	2002      	movs	r0, #2
 8000e30:	e7ac      	b.n	8000d8c <HAL_ADC_ConfigChannel+0x74>
 8000e32:	bf00      	nop
 8000e34:	40012000 	.word	0x40012000
 8000e38:	40012300 	.word	0x40012300
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	000f4240 	.word	0x000f4240

08000e44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e46:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e4c:	041b      	lsls	r3, r3, #16
 8000e4e:	0c1b      	lsrs	r3, r3, #16
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e54:	0200      	lsls	r0, r0, #8
 8000e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000e5e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e60:	60d3      	str	r3, [r2, #12]
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6a:	b530      	push	{r4, r5, lr}
 8000e6c:	68dc      	ldr	r4, [r3, #12]
 8000e6e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e72:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	2b04      	cmp	r3, #4
 8000e7a:	bf28      	it	cs
 8000e7c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 0501 	mov.w	r5, #1
 8000e84:	fa05 f303 	lsl.w	r3, r5, r3
 8000e88:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8c:	bf8c      	ite	hi
 8000e8e:	3c03      	subhi	r4, #3
 8000e90:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e92:	4019      	ands	r1, r3
 8000e94:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e96:	fa05 f404 	lsl.w	r4, r5, r4
 8000e9a:	3c01      	subs	r4, #1
 8000e9c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e9e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	ea42 0201 	orr.w	r2, r2, r1
 8000ea4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	bfaf      	iteee	ge
 8000eaa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	f000 000f 	andlt.w	r0, r0, #15
 8000eb2:	4b06      	ldrlt	r3, [pc, #24]	; (8000ecc <HAL_NVIC_SetPriority+0x64>)
 8000eb4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	bfa5      	ittet	ge
 8000eb8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000ebc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ec4:	bd30      	pop	{r4, r5, pc}
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00
 8000ecc:	e000ed14 	.word	0xe000ed14

08000ed0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed0:	3801      	subs	r0, #1
 8000ed2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ed6:	d20a      	bcs.n	8000eee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000edc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	21f0      	movs	r1, #240	; 0xf0
 8000ee0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000eee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000efe:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f00:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f02:	bf0c      	ite	eq
 8000f04:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f08:	f022 0204 	bicne.w	r2, r2, #4
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	4770      	bx	lr
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000f14:	4770      	bx	lr

08000f16 <HAL_SYSTICK_IRQHandler>:
{
 8000f16:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000f18:	f7ff fffc 	bl	8000f14 <HAL_SYSTICK_Callback>
 8000f1c:	bd08      	pop	{r3, pc}
	...

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f24:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f26:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f28:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80010d8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f2c:	4a68      	ldr	r2, [pc, #416]	; (80010d0 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f2e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80010dc <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f32:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f34:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000f36:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000f3c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f40:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000f44:	45b6      	cmp	lr, r6
 8000f46:	f040 80ae 	bne.w	80010a6 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4a:	684c      	ldr	r4, [r1, #4]
 8000f4c:	f024 0710 	bic.w	r7, r4, #16
 8000f50:	2f02      	cmp	r7, #2
 8000f52:	d116      	bne.n	8000f82 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000f54:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000f58:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f5c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000f60:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f64:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f68:	f04f 0c0f 	mov.w	ip, #15
 8000f6c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f70:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f74:	690d      	ldr	r5, [r1, #16]
 8000f76:	fa05 f50b 	lsl.w	r5, r5, fp
 8000f7a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000f7e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000f82:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f86:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000f88:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f8c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000f90:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f92:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f96:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f9e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000fa6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000faa:	d811      	bhi.n	8000fd0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000fac:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fae:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb2:	68cf      	ldr	r7, [r1, #12]
 8000fb4:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000fb8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000fbc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000fbe:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fc4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000fc8:	409f      	lsls	r7, r3
 8000fca:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000fce:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000fd0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd4:	688f      	ldr	r7, [r1, #8]
 8000fd6:	fa07 f70a 	lsl.w	r7, r7, sl
 8000fda:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000fdc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fde:	00e5      	lsls	r5, r4, #3
 8000fe0:	d561      	bpl.n	80010a6 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	f04f 0b00 	mov.w	fp, #0
 8000fe6:	f8cd b00c 	str.w	fp, [sp, #12]
 8000fea:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fee:	4d39      	ldr	r5, [pc, #228]	; (80010d4 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ff4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ff8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ffc:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001000:	9703      	str	r7, [sp, #12]
 8001002:	9f03      	ldr	r7, [sp, #12]
 8001004:	f023 0703 	bic.w	r7, r3, #3
 8001008:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800100c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001010:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001014:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001018:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800101c:	f04f 0e0f 	mov.w	lr, #15
 8001020:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001024:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001026:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102a:	d043      	beq.n	80010b4 <HAL_GPIO_Init+0x194>
 800102c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001030:	42a8      	cmp	r0, r5
 8001032:	d041      	beq.n	80010b8 <HAL_GPIO_Init+0x198>
 8001034:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001038:	42a8      	cmp	r0, r5
 800103a:	d03f      	beq.n	80010bc <HAL_GPIO_Init+0x19c>
 800103c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001040:	42a8      	cmp	r0, r5
 8001042:	d03d      	beq.n	80010c0 <HAL_GPIO_Init+0x1a0>
 8001044:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001048:	42a8      	cmp	r0, r5
 800104a:	d03b      	beq.n	80010c4 <HAL_GPIO_Init+0x1a4>
 800104c:	4548      	cmp	r0, r9
 800104e:	d03b      	beq.n	80010c8 <HAL_GPIO_Init+0x1a8>
 8001050:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001054:	42a8      	cmp	r0, r5
 8001056:	d039      	beq.n	80010cc <HAL_GPIO_Init+0x1ac>
 8001058:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800105c:	42a8      	cmp	r0, r5
 800105e:	bf14      	ite	ne
 8001060:	2508      	movne	r5, #8
 8001062:	2507      	moveq	r5, #7
 8001064:	fa05 f50c 	lsl.w	r5, r5, ip
 8001068:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800106c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800106e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001070:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001072:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001076:	bf0c      	ite	eq
 8001078:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800107a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800107c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800107e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001080:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001084:	bf0c      	ite	eq
 8001086:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001088:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800108a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800108c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800108e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001092:	bf0c      	ite	eq
 8001094:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001096:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001098:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800109a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800109c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800109e:	bf54      	ite	pl
 80010a0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80010a2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80010a4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	3301      	adds	r3, #1
 80010a8:	2b10      	cmp	r3, #16
 80010aa:	f47f af44 	bne.w	8000f36 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80010ae:	b005      	add	sp, #20
 80010b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b4:	465d      	mov	r5, fp
 80010b6:	e7d5      	b.n	8001064 <HAL_GPIO_Init+0x144>
 80010b8:	2501      	movs	r5, #1
 80010ba:	e7d3      	b.n	8001064 <HAL_GPIO_Init+0x144>
 80010bc:	2502      	movs	r5, #2
 80010be:	e7d1      	b.n	8001064 <HAL_GPIO_Init+0x144>
 80010c0:	2503      	movs	r5, #3
 80010c2:	e7cf      	b.n	8001064 <HAL_GPIO_Init+0x144>
 80010c4:	2504      	movs	r5, #4
 80010c6:	e7cd      	b.n	8001064 <HAL_GPIO_Init+0x144>
 80010c8:	2505      	movs	r5, #5
 80010ca:	e7cb      	b.n	8001064 <HAL_GPIO_Init+0x144>
 80010cc:	2506      	movs	r5, #6
 80010ce:	e7c9      	b.n	8001064 <HAL_GPIO_Init+0x144>
 80010d0:	40013c00 	.word	0x40013c00
 80010d4:	40020000 	.word	0x40020000
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40021400 	.word	0x40021400

080010e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e0:	b10a      	cbz	r2, 80010e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e2:	6181      	str	r1, [r0, #24]
 80010e4:	4770      	bx	lr
 80010e6:	0409      	lsls	r1, r1, #16
 80010e8:	e7fb      	b.n	80010e2 <HAL_GPIO_WritePin+0x2>
	...

080010ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f0:	4604      	mov	r4, r0
 80010f2:	b918      	cbnz	r0, 80010fc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80010f4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80010f6:	b002      	add	sp, #8
 80010f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fc:	6803      	ldr	r3, [r0, #0]
 80010fe:	07dd      	lsls	r5, r3, #31
 8001100:	d410      	bmi.n	8001124 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	0798      	lsls	r0, r3, #30
 8001106:	d458      	bmi.n	80011ba <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	071a      	lsls	r2, r3, #28
 800110c:	f100 809a 	bmi.w	8001244 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001110:	6823      	ldr	r3, [r4, #0]
 8001112:	075b      	lsls	r3, r3, #29
 8001114:	f100 80b8 	bmi.w	8001288 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001118:	69a2      	ldr	r2, [r4, #24]
 800111a:	2a00      	cmp	r2, #0
 800111c:	f040 8119 	bne.w	8001352 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001120:	2000      	movs	r0, #0
 8001122:	e7e8      	b.n	80010f6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001124:	4ba6      	ldr	r3, [pc, #664]	; (80013c0 <HAL_RCC_OscConfig+0x2d4>)
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	f002 020c 	and.w	r2, r2, #12
 800112c:	2a04      	cmp	r2, #4
 800112e:	d007      	beq.n	8001140 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001136:	2a08      	cmp	r2, #8
 8001138:	d10a      	bne.n	8001150 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	0259      	lsls	r1, r3, #9
 800113e:	d507      	bpl.n	8001150 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	4b9f      	ldr	r3, [pc, #636]	; (80013c0 <HAL_RCC_OscConfig+0x2d4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	039a      	lsls	r2, r3, #14
 8001146:	d5dc      	bpl.n	8001102 <HAL_RCC_OscConfig+0x16>
 8001148:	6863      	ldr	r3, [r4, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1d9      	bne.n	8001102 <HAL_RCC_OscConfig+0x16>
 800114e:	e7d1      	b.n	80010f4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001150:	6863      	ldr	r3, [r4, #4]
 8001152:	4d9b      	ldr	r5, [pc, #620]	; (80013c0 <HAL_RCC_OscConfig+0x2d4>)
 8001154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001158:	d111      	bne.n	800117e <HAL_RCC_OscConfig+0x92>
 800115a:	682b      	ldr	r3, [r5, #0]
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001162:	f7ff fd1b 	bl	8000b9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	4d96      	ldr	r5, [pc, #600]	; (80013c0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001168:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	682b      	ldr	r3, [r5, #0]
 800116c:	039b      	lsls	r3, r3, #14
 800116e:	d4c8      	bmi.n	8001102 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fd14 	bl	8000b9c <HAL_GetTick>
 8001174:	1b80      	subs	r0, r0, r6
 8001176:	2864      	cmp	r0, #100	; 0x64
 8001178:	d9f7      	bls.n	800116a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800117a:	2003      	movs	r0, #3
 800117c:	e7bb      	b.n	80010f6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001182:	d104      	bne.n	800118e <HAL_RCC_OscConfig+0xa2>
 8001184:	682b      	ldr	r3, [r5, #0]
 8001186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118a:	602b      	str	r3, [r5, #0]
 800118c:	e7e5      	b.n	800115a <HAL_RCC_OscConfig+0x6e>
 800118e:	682a      	ldr	r2, [r5, #0]
 8001190:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001194:	602a      	str	r2, [r5, #0]
 8001196:	682a      	ldr	r2, [r5, #0]
 8001198:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800119c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1df      	bne.n	8001162 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80011a2:	f7ff fcfb 	bl	8000b9c <HAL_GetTick>
 80011a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a8:	682b      	ldr	r3, [r5, #0]
 80011aa:	039f      	lsls	r7, r3, #14
 80011ac:	d5a9      	bpl.n	8001102 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ae:	f7ff fcf5 	bl	8000b9c <HAL_GetTick>
 80011b2:	1b80      	subs	r0, r0, r6
 80011b4:	2864      	cmp	r0, #100	; 0x64
 80011b6:	d9f7      	bls.n	80011a8 <HAL_RCC_OscConfig+0xbc>
 80011b8:	e7df      	b.n	800117a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ba:	4b81      	ldr	r3, [pc, #516]	; (80013c0 <HAL_RCC_OscConfig+0x2d4>)
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	f012 0f0c 	tst.w	r2, #12
 80011c2:	d007      	beq.n	80011d4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ca:	2a08      	cmp	r2, #8
 80011cc:	d111      	bne.n	80011f2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	025e      	lsls	r6, r3, #9
 80011d2:	d40e      	bmi.n	80011f2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d4:	4b7a      	ldr	r3, [pc, #488]	; (80013c0 <HAL_RCC_OscConfig+0x2d4>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	0795      	lsls	r5, r2, #30
 80011da:	d502      	bpl.n	80011e2 <HAL_RCC_OscConfig+0xf6>
 80011dc:	68e2      	ldr	r2, [r4, #12]
 80011de:	2a01      	cmp	r2, #1
 80011e0:	d188      	bne.n	80010f4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	6921      	ldr	r1, [r4, #16]
 80011e6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80011ea:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80011ee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f0:	e78a      	b.n	8001108 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011f2:	68e2      	ldr	r2, [r4, #12]
 80011f4:	4b73      	ldr	r3, [pc, #460]	; (80013c4 <HAL_RCC_OscConfig+0x2d8>)
 80011f6:	b1b2      	cbz	r2, 8001226 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011fc:	f7ff fcce 	bl	8000b9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	4d6f      	ldr	r5, [pc, #444]	; (80013c0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001202:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001204:	682b      	ldr	r3, [r5, #0]
 8001206:	0798      	lsls	r0, r3, #30
 8001208:	d507      	bpl.n	800121a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120a:	682b      	ldr	r3, [r5, #0]
 800120c:	6922      	ldr	r2, [r4, #16]
 800120e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001212:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001216:	602b      	str	r3, [r5, #0]
 8001218:	e776      	b.n	8001108 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121a:	f7ff fcbf 	bl	8000b9c <HAL_GetTick>
 800121e:	1b80      	subs	r0, r0, r6
 8001220:	2802      	cmp	r0, #2
 8001222:	d9ef      	bls.n	8001204 <HAL_RCC_OscConfig+0x118>
 8001224:	e7a9      	b.n	800117a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001226:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001228:	f7ff fcb8 	bl	8000b9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122c:	4d64      	ldr	r5, [pc, #400]	; (80013c0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800122e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001230:	682b      	ldr	r3, [r5, #0]
 8001232:	0799      	lsls	r1, r3, #30
 8001234:	f57f af68 	bpl.w	8001108 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001238:	f7ff fcb0 	bl	8000b9c <HAL_GetTick>
 800123c:	1b80      	subs	r0, r0, r6
 800123e:	2802      	cmp	r0, #2
 8001240:	d9f6      	bls.n	8001230 <HAL_RCC_OscConfig+0x144>
 8001242:	e79a      	b.n	800117a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001244:	6962      	ldr	r2, [r4, #20]
 8001246:	4b60      	ldr	r3, [pc, #384]	; (80013c8 <HAL_RCC_OscConfig+0x2dc>)
 8001248:	b17a      	cbz	r2, 800126a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800124a:	2201      	movs	r2, #1
 800124c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800124e:	f7ff fca5 	bl	8000b9c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001252:	4d5b      	ldr	r5, [pc, #364]	; (80013c0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001254:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001256:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001258:	079f      	lsls	r7, r3, #30
 800125a:	f53f af59 	bmi.w	8001110 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125e:	f7ff fc9d 	bl	8000b9c <HAL_GetTick>
 8001262:	1b80      	subs	r0, r0, r6
 8001264:	2802      	cmp	r0, #2
 8001266:	d9f6      	bls.n	8001256 <HAL_RCC_OscConfig+0x16a>
 8001268:	e787      	b.n	800117a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800126a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800126c:	f7ff fc96 	bl	8000b9c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001270:	4d53      	ldr	r5, [pc, #332]	; (80013c0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001272:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001274:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001276:	0798      	lsls	r0, r3, #30
 8001278:	f57f af4a 	bpl.w	8001110 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800127c:	f7ff fc8e 	bl	8000b9c <HAL_GetTick>
 8001280:	1b80      	subs	r0, r0, r6
 8001282:	2802      	cmp	r0, #2
 8001284:	d9f6      	bls.n	8001274 <HAL_RCC_OscConfig+0x188>
 8001286:	e778      	b.n	800117a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001288:	4b4d      	ldr	r3, [pc, #308]	; (80013c0 <HAL_RCC_OscConfig+0x2d4>)
 800128a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800128c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001290:	d128      	bne.n	80012e4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	9201      	str	r2, [sp, #4]
 8001294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001296:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800129a:	641a      	str	r2, [r3, #64]	; 0x40
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012a6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a8:	4d48      	ldr	r5, [pc, #288]	; (80013cc <HAL_RCC_OscConfig+0x2e0>)
 80012aa:	682b      	ldr	r3, [r5, #0]
 80012ac:	05d9      	lsls	r1, r3, #23
 80012ae:	d51b      	bpl.n	80012e8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b0:	68a3      	ldr	r3, [r4, #8]
 80012b2:	4d43      	ldr	r5, [pc, #268]	; (80013c0 <HAL_RCC_OscConfig+0x2d4>)
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d127      	bne.n	8001308 <HAL_RCC_OscConfig+0x21c>
 80012b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80012c0:	f7ff fc6c 	bl	8000b9c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c4:	4d3e      	ldr	r5, [pc, #248]	; (80013c0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80012c6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012ce:	079b      	lsls	r3, r3, #30
 80012d0:	d539      	bpl.n	8001346 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80012d2:	2e00      	cmp	r6, #0
 80012d4:	f43f af20 	beq.w	8001118 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d8:	4a39      	ldr	r2, [pc, #228]	; (80013c0 <HAL_RCC_OscConfig+0x2d4>)
 80012da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	e719      	b.n	8001118 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80012e4:	2600      	movs	r6, #0
 80012e6:	e7df      	b.n	80012a8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012e8:	682b      	ldr	r3, [r5, #0]
 80012ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ee:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80012f0:	f7ff fc54 	bl	8000b9c <HAL_GetTick>
 80012f4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f6:	682b      	ldr	r3, [r5, #0]
 80012f8:	05da      	lsls	r2, r3, #23
 80012fa:	d4d9      	bmi.n	80012b0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fc:	f7ff fc4e 	bl	8000b9c <HAL_GetTick>
 8001300:	1bc0      	subs	r0, r0, r7
 8001302:	2802      	cmp	r0, #2
 8001304:	d9f7      	bls.n	80012f6 <HAL_RCC_OscConfig+0x20a>
 8001306:	e738      	b.n	800117a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001308:	2b05      	cmp	r3, #5
 800130a:	d104      	bne.n	8001316 <HAL_RCC_OscConfig+0x22a>
 800130c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	672b      	str	r3, [r5, #112]	; 0x70
 8001314:	e7d0      	b.n	80012b8 <HAL_RCC_OscConfig+0x1cc>
 8001316:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001318:	f022 0201 	bic.w	r2, r2, #1
 800131c:	672a      	str	r2, [r5, #112]	; 0x70
 800131e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001320:	f022 0204 	bic.w	r2, r2, #4
 8001324:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1ca      	bne.n	80012c0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800132a:	f7ff fc37 	bl	8000b9c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800132e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001332:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001334:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001336:	0798      	lsls	r0, r3, #30
 8001338:	d5cb      	bpl.n	80012d2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133a:	f7ff fc2f 	bl	8000b9c <HAL_GetTick>
 800133e:	1bc0      	subs	r0, r0, r7
 8001340:	4540      	cmp	r0, r8
 8001342:	d9f7      	bls.n	8001334 <HAL_RCC_OscConfig+0x248>
 8001344:	e719      	b.n	800117a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001346:	f7ff fc29 	bl	8000b9c <HAL_GetTick>
 800134a:	1bc0      	subs	r0, r0, r7
 800134c:	4540      	cmp	r0, r8
 800134e:	d9bd      	bls.n	80012cc <HAL_RCC_OscConfig+0x1e0>
 8001350:	e713      	b.n	800117a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001352:	4d1b      	ldr	r5, [pc, #108]	; (80013c0 <HAL_RCC_OscConfig+0x2d4>)
 8001354:	68ab      	ldr	r3, [r5, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b08      	cmp	r3, #8
 800135c:	f43f aeca 	beq.w	80010f4 <HAL_RCC_OscConfig+0x8>
 8001360:	4e1b      	ldr	r6, [pc, #108]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 8001362:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001364:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001366:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001368:	d134      	bne.n	80013d4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800136a:	f7ff fc17 	bl	8000b9c <HAL_GetTick>
 800136e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001370:	682b      	ldr	r3, [r5, #0]
 8001372:	0199      	lsls	r1, r3, #6
 8001374:	d41e      	bmi.n	80013b4 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001376:	6a22      	ldr	r2, [r4, #32]
 8001378:	69e3      	ldr	r3, [r4, #28]
 800137a:	4313      	orrs	r3, r2
 800137c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800137e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001382:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001384:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001388:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800138a:	4c0d      	ldr	r4, [pc, #52]	; (80013c0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800138c:	0852      	lsrs	r2, r2, #1
 800138e:	3a01      	subs	r2, #1
 8001390:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001394:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001396:	2301      	movs	r3, #1
 8001398:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800139a:	f7ff fbff 	bl	8000b9c <HAL_GetTick>
 800139e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	019a      	lsls	r2, r3, #6
 80013a4:	f53f aebc 	bmi.w	8001120 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff fbf8 	bl	8000b9c <HAL_GetTick>
 80013ac:	1b40      	subs	r0, r0, r5
 80013ae:	2802      	cmp	r0, #2
 80013b0:	d9f6      	bls.n	80013a0 <HAL_RCC_OscConfig+0x2b4>
 80013b2:	e6e2      	b.n	800117a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b4:	f7ff fbf2 	bl	8000b9c <HAL_GetTick>
 80013b8:	1bc0      	subs	r0, r0, r7
 80013ba:	2802      	cmp	r0, #2
 80013bc:	d9d8      	bls.n	8001370 <HAL_RCC_OscConfig+0x284>
 80013be:	e6dc      	b.n	800117a <HAL_RCC_OscConfig+0x8e>
 80013c0:	40023800 	.word	0x40023800
 80013c4:	42470000 	.word	0x42470000
 80013c8:	42470e80 	.word	0x42470e80
 80013cc:	40007000 	.word	0x40007000
 80013d0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80013d4:	f7ff fbe2 	bl	8000b9c <HAL_GetTick>
 80013d8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013da:	682b      	ldr	r3, [r5, #0]
 80013dc:	019b      	lsls	r3, r3, #6
 80013de:	f57f ae9f 	bpl.w	8001120 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e2:	f7ff fbdb 	bl	8000b9c <HAL_GetTick>
 80013e6:	1b00      	subs	r0, r0, r4
 80013e8:	2802      	cmp	r0, #2
 80013ea:	d9f6      	bls.n	80013da <HAL_RCC_OscConfig+0x2ee>
 80013ec:	e6c5      	b.n	800117a <HAL_RCC_OscConfig+0x8e>
 80013ee:	bf00      	nop

080013f0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013f0:	4913      	ldr	r1, [pc, #76]	; (8001440 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80013f2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013f4:	688b      	ldr	r3, [r1, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	d003      	beq.n	8001406 <HAL_RCC_GetSysClockFreq+0x16>
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d003      	beq.n	800140a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001402:	4810      	ldr	r0, [pc, #64]	; (8001444 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001404:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001406:	4810      	ldr	r0, [pc, #64]	; (8001448 <HAL_RCC_GetSysClockFreq+0x58>)
 8001408:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800140a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800140c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800140e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001410:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001414:	bf14      	ite	ne
 8001416:	480c      	ldrne	r0, [pc, #48]	; (8001448 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001418:	480a      	ldreq	r0, [pc, #40]	; (8001444 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800141a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800141e:	bf18      	it	ne
 8001420:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001422:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001426:	fba1 0100 	umull	r0, r1, r1, r0
 800142a:	f7fe fecd 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_RCC_GetSysClockFreq+0x50>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001436:	3301      	adds	r3, #1
 8001438:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800143a:	fbb0 f0f3 	udiv	r0, r0, r3
 800143e:	bd08      	pop	{r3, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	00f42400 	.word	0x00f42400
 8001448:	017d7840 	.word	0x017d7840

0800144c <HAL_RCC_ClockConfig>:
{
 800144c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001450:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001452:	4604      	mov	r4, r0
 8001454:	b910      	cbnz	r0, 800145c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001456:	2001      	movs	r0, #1
 8001458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800145c:	4b44      	ldr	r3, [pc, #272]	; (8001570 <HAL_RCC_ClockConfig+0x124>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	f002 020f 	and.w	r2, r2, #15
 8001464:	428a      	cmp	r2, r1
 8001466:	d328      	bcc.n	80014ba <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001468:	6821      	ldr	r1, [r4, #0]
 800146a:	078f      	lsls	r7, r1, #30
 800146c:	d42d      	bmi.n	80014ca <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800146e:	07c8      	lsls	r0, r1, #31
 8001470:	d440      	bmi.n	80014f4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001472:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <HAL_RCC_ClockConfig+0x124>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	f002 020f 	and.w	r2, r2, #15
 800147a:	4295      	cmp	r5, r2
 800147c:	d366      	bcc.n	800154c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147e:	6822      	ldr	r2, [r4, #0]
 8001480:	0751      	lsls	r1, r2, #29
 8001482:	d46c      	bmi.n	800155e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001484:	0713      	lsls	r3, r2, #28
 8001486:	d507      	bpl.n	8001498 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001488:	4a3a      	ldr	r2, [pc, #232]	; (8001574 <HAL_RCC_ClockConfig+0x128>)
 800148a:	6921      	ldr	r1, [r4, #16]
 800148c:	6893      	ldr	r3, [r2, #8]
 800148e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001492:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001496:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001498:	f7ff ffaa 	bl	80013f0 <HAL_RCC_GetSysClockFreq>
 800149c:	4b35      	ldr	r3, [pc, #212]	; (8001574 <HAL_RCC_ClockConfig+0x128>)
 800149e:	4a36      	ldr	r2, [pc, #216]	; (8001578 <HAL_RCC_ClockConfig+0x12c>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	40d8      	lsrs	r0, r3
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_RCC_ClockConfig+0x130>)
 80014ac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff fb2a 	bl	8000b08 <HAL_InitTick>
  return HAL_OK;
 80014b4:	2000      	movs	r0, #0
 80014b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ba:	b2ca      	uxtb	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 030f 	and.w	r3, r3, #15
 80014c4:	4299      	cmp	r1, r3
 80014c6:	d1c6      	bne.n	8001456 <HAL_RCC_ClockConfig+0xa>
 80014c8:	e7ce      	b.n	8001468 <HAL_RCC_ClockConfig+0x1c>
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014cc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d0:	bf1e      	ittt	ne
 80014d2:	689a      	ldrne	r2, [r3, #8]
 80014d4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80014d8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014da:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014dc:	bf42      	ittt	mi
 80014de:	689a      	ldrmi	r2, [r3, #8]
 80014e0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80014e4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	68a0      	ldr	r0, [r4, #8]
 80014ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80014ee:	4302      	orrs	r2, r0
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	e7bc      	b.n	800146e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f4:	6862      	ldr	r2, [r4, #4]
 80014f6:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <HAL_RCC_ClockConfig+0x128>)
 80014f8:	2a01      	cmp	r2, #1
 80014fa:	d11d      	bne.n	8001538 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	d0a8      	beq.n	8001456 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001504:	4e1b      	ldr	r6, [pc, #108]	; (8001574 <HAL_RCC_ClockConfig+0x128>)
 8001506:	68b3      	ldr	r3, [r6, #8]
 8001508:	f023 0303 	bic.w	r3, r3, #3
 800150c:	4313      	orrs	r3, r2
 800150e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001510:	f7ff fb44 	bl	8000b9c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001514:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001518:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151a:	68b3      	ldr	r3, [r6, #8]
 800151c:	6862      	ldr	r2, [r4, #4]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001526:	d0a4      	beq.n	8001472 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001528:	f7ff fb38 	bl	8000b9c <HAL_GetTick>
 800152c:	1bc0      	subs	r0, r0, r7
 800152e:	4540      	cmp	r0, r8
 8001530:	d9f3      	bls.n	800151a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001532:	2003      	movs	r0, #3
}
 8001534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001538:	1e91      	subs	r1, r2, #2
 800153a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800153e:	d802      	bhi.n	8001546 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001540:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001544:	e7dd      	b.n	8001502 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001546:	f013 0f02 	tst.w	r3, #2
 800154a:	e7da      	b.n	8001502 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154c:	b2ea      	uxtb	r2, r5
 800154e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	429d      	cmp	r5, r3
 8001558:	f47f af7d 	bne.w	8001456 <HAL_RCC_ClockConfig+0xa>
 800155c:	e78f      	b.n	800147e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800155e:	4905      	ldr	r1, [pc, #20]	; (8001574 <HAL_RCC_ClockConfig+0x128>)
 8001560:	68e0      	ldr	r0, [r4, #12]
 8001562:	688b      	ldr	r3, [r1, #8]
 8001564:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001568:	4303      	orrs	r3, r0
 800156a:	608b      	str	r3, [r1, #8]
 800156c:	e78a      	b.n	8001484 <HAL_RCC_ClockConfig+0x38>
 800156e:	bf00      	nop
 8001570:	40023c00 	.word	0x40023c00
 8001574:	40023800 	.word	0x40023800
 8001578:	0800192b 	.word	0x0800192b
 800157c:	20000000 	.word	0x20000000

08001580 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001580:	4b01      	ldr	r3, [pc, #4]	; (8001588 <HAL_RCC_GetHCLKFreq+0x8>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000000 	.word	0x20000000

0800158c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001596:	5cd3      	ldrb	r3, [r2, r3]
 8001598:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800159a:	6810      	ldr	r0, [r2, #0]
}
 800159c:	40d8      	lsrs	r0, r3
 800159e:	4770      	bx	lr
 80015a0:	40023800 	.word	0x40023800
 80015a4:	0800193b 	.word	0x0800193b
 80015a8:	20000000 	.word	0x20000000

080015ac <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	4a03      	ldr	r2, [pc, #12]	; (80015c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015ba:	6810      	ldr	r0, [r2, #0]
}
 80015bc:	40d8      	lsrs	r0, r3
 80015be:	4770      	bx	lr
 80015c0:	40023800 	.word	0x40023800
 80015c4:	0800193b 	.word	0x0800193b
 80015c8:	20000000 	.word	0x20000000

080015cc <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80015d0:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80015d2:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80015d4:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015d6:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80015d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80015dc:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80015de:	6133      	str	r3, [r6, #16]
{
 80015e0:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015e2:	6883      	ldr	r3, [r0, #8]
 80015e4:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80015e6:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015e8:	4303      	orrs	r3, r0
 80015ea:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80015ec:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015f0:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80015f2:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015f6:	430b      	orrs	r3, r1
 80015f8:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80015fa:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80015fc:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80015fe:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001604:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001606:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800160a:	6173      	str	r3, [r6, #20]
 800160c:	4b7a      	ldr	r3, [pc, #488]	; (80017f8 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800160e:	d17c      	bne.n	800170a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001610:	429e      	cmp	r6, r3
 8001612:	d003      	beq.n	800161c <UART_SetConfig+0x50>
 8001614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001618:	429e      	cmp	r6, r3
 800161a:	d144      	bne.n	80016a6 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800161c:	f7ff ffc6 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
 8001620:	2519      	movs	r5, #25
 8001622:	fb05 f300 	mul.w	r3, r5, r0
 8001626:	6860      	ldr	r0, [r4, #4]
 8001628:	f04f 0964 	mov.w	r9, #100	; 0x64
 800162c:	0040      	lsls	r0, r0, #1
 800162e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001632:	fbb3 f3f9 	udiv	r3, r3, r9
 8001636:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800163a:	f7ff ffb7 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
 800163e:	6863      	ldr	r3, [r4, #4]
 8001640:	4368      	muls	r0, r5
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fbb0 f7f3 	udiv	r7, r0, r3
 8001648:	f7ff ffb0 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
 800164c:	6863      	ldr	r3, [r4, #4]
 800164e:	4368      	muls	r0, r5
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fbb0 f3f3 	udiv	r3, r0, r3
 8001656:	fbb3 f3f9 	udiv	r3, r3, r9
 800165a:	fb09 7313 	mls	r3, r9, r3, r7
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	3332      	adds	r3, #50	; 0x32
 8001662:	fbb3 f3f9 	udiv	r3, r3, r9
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800166c:	f7ff ff9e 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
 8001670:	6862      	ldr	r2, [r4, #4]
 8001672:	4368      	muls	r0, r5
 8001674:	0052      	lsls	r2, r2, #1
 8001676:	fbb0 faf2 	udiv	sl, r0, r2
 800167a:	f7ff ff97 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800167e:	6863      	ldr	r3, [r4, #4]
 8001680:	4368      	muls	r0, r5
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fbb0 f3f3 	udiv	r3, r0, r3
 8001688:	fbb3 f3f9 	udiv	r3, r3, r9
 800168c:	fb09 a313 	mls	r3, r9, r3, sl
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	3332      	adds	r3, #50	; 0x32
 8001694:	fbb3 f3f9 	udiv	r3, r3, r9
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800169e:	443b      	add	r3, r7
 80016a0:	60b3      	str	r3, [r6, #8]
 80016a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80016a6:	f7ff ff71 	bl	800158c <HAL_RCC_GetPCLK1Freq>
 80016aa:	2519      	movs	r5, #25
 80016ac:	fb05 f300 	mul.w	r3, r5, r0
 80016b0:	6860      	ldr	r0, [r4, #4]
 80016b2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016b6:	0040      	lsls	r0, r0, #1
 80016b8:	fbb3 f3f0 	udiv	r3, r3, r0
 80016bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80016c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80016c4:	f7ff ff62 	bl	800158c <HAL_RCC_GetPCLK1Freq>
 80016c8:	6863      	ldr	r3, [r4, #4]
 80016ca:	4368      	muls	r0, r5
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fbb0 f7f3 	udiv	r7, r0, r3
 80016d2:	f7ff ff5b 	bl	800158c <HAL_RCC_GetPCLK1Freq>
 80016d6:	6863      	ldr	r3, [r4, #4]
 80016d8:	4368      	muls	r0, r5
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e0:	fbb3 f3f9 	udiv	r3, r3, r9
 80016e4:	fb09 7313 	mls	r3, r9, r3, r7
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	3332      	adds	r3, #50	; 0x32
 80016ec:	fbb3 f3f9 	udiv	r3, r3, r9
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80016f6:	f7ff ff49 	bl	800158c <HAL_RCC_GetPCLK1Freq>
 80016fa:	6862      	ldr	r2, [r4, #4]
 80016fc:	4368      	muls	r0, r5
 80016fe:	0052      	lsls	r2, r2, #1
 8001700:	fbb0 faf2 	udiv	sl, r0, r2
 8001704:	f7ff ff42 	bl	800158c <HAL_RCC_GetPCLK1Freq>
 8001708:	e7b9      	b.n	800167e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800170a:	429e      	cmp	r6, r3
 800170c:	d002      	beq.n	8001714 <UART_SetConfig+0x148>
 800170e:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <UART_SetConfig+0x230>)
 8001710:	429e      	cmp	r6, r3
 8001712:	d140      	bne.n	8001796 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001714:	f7ff ff4a 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
 8001718:	6867      	ldr	r7, [r4, #4]
 800171a:	2519      	movs	r5, #25
 800171c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001720:	fb05 f300 	mul.w	r3, r5, r0
 8001724:	00bf      	lsls	r7, r7, #2
 8001726:	fbb3 f3f7 	udiv	r3, r3, r7
 800172a:	fbb3 f3f9 	udiv	r3, r3, r9
 800172e:	011f      	lsls	r7, r3, #4
 8001730:	f7ff ff3c 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
 8001734:	6863      	ldr	r3, [r4, #4]
 8001736:	4368      	muls	r0, r5
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	fbb0 f8f3 	udiv	r8, r0, r3
 800173e:	f7ff ff35 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
 8001742:	6863      	ldr	r3, [r4, #4]
 8001744:	4368      	muls	r0, r5
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	fbb0 f3f3 	udiv	r3, r0, r3
 800174c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001750:	fb09 8313 	mls	r3, r9, r3, r8
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	3332      	adds	r3, #50	; 0x32
 8001758:	fbb3 f3f9 	udiv	r3, r3, r9
 800175c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001760:	f7ff ff24 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
 8001764:	6862      	ldr	r2, [r4, #4]
 8001766:	4368      	muls	r0, r5
 8001768:	0092      	lsls	r2, r2, #2
 800176a:	fbb0 faf2 	udiv	sl, r0, r2
 800176e:	f7ff ff1d 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001772:	6863      	ldr	r3, [r4, #4]
 8001774:	4368      	muls	r0, r5
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	fbb0 f3f3 	udiv	r3, r0, r3
 800177c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001780:	fb09 a313 	mls	r3, r9, r3, sl
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	3332      	adds	r3, #50	; 0x32
 8001788:	fbb3 f3f9 	udiv	r3, r3, r9
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	ea43 0308 	orr.w	r3, r3, r8
 8001794:	e783      	b.n	800169e <UART_SetConfig+0xd2>
 8001796:	f7ff fef9 	bl	800158c <HAL_RCC_GetPCLK1Freq>
 800179a:	6867      	ldr	r7, [r4, #4]
 800179c:	2519      	movs	r5, #25
 800179e:	f04f 0964 	mov.w	r9, #100	; 0x64
 80017a2:	fb05 f300 	mul.w	r3, r5, r0
 80017a6:	00bf      	lsls	r7, r7, #2
 80017a8:	fbb3 f3f7 	udiv	r3, r3, r7
 80017ac:	fbb3 f3f9 	udiv	r3, r3, r9
 80017b0:	011f      	lsls	r7, r3, #4
 80017b2:	f7ff feeb 	bl	800158c <HAL_RCC_GetPCLK1Freq>
 80017b6:	6863      	ldr	r3, [r4, #4]
 80017b8:	4368      	muls	r0, r5
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	fbb0 f8f3 	udiv	r8, r0, r3
 80017c0:	f7ff fee4 	bl	800158c <HAL_RCC_GetPCLK1Freq>
 80017c4:	6863      	ldr	r3, [r4, #4]
 80017c6:	4368      	muls	r0, r5
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ce:	fbb3 f3f9 	udiv	r3, r3, r9
 80017d2:	fb09 8313 	mls	r3, r9, r3, r8
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	3332      	adds	r3, #50	; 0x32
 80017da:	fbb3 f3f9 	udiv	r3, r3, r9
 80017de:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80017e2:	f7ff fed3 	bl	800158c <HAL_RCC_GetPCLK1Freq>
 80017e6:	6862      	ldr	r2, [r4, #4]
 80017e8:	4368      	muls	r0, r5
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	fbb0 faf2 	udiv	sl, r0, r2
 80017f0:	f7ff fecc 	bl	800158c <HAL_RCC_GetPCLK1Freq>
 80017f4:	e7bd      	b.n	8001772 <UART_SetConfig+0x1a6>
 80017f6:	bf00      	nop
 80017f8:	40011000 	.word	0x40011000
 80017fc:	40011400 	.word	0x40011400

08001800 <HAL_UART_Init>:
{
 8001800:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001802:	4604      	mov	r4, r0
 8001804:	b340      	cbz	r0, 8001858 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001806:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800180a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800180e:	b91b      	cbnz	r3, 8001818 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001810:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001814:	f7ff f950 	bl	8000ab8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001818:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800181a:	2324      	movs	r3, #36	; 0x24
 800181c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001820:	68d3      	ldr	r3, [r2, #12]
 8001822:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001826:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff fecf 	bl	80015cc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001836:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800183e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001846:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001848:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800184a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800184c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800184e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001852:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001856:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001858:	2001      	movs	r0, #1
}
 800185a:	bd10      	pop	{r4, pc}

0800185c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800185c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001894 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001860:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001862:	e003      	b.n	800186c <LoopCopyDataInit>

08001864 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001866:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001868:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800186a:	3104      	adds	r1, #4

0800186c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001870:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001872:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001874:	d3f6      	bcc.n	8001864 <CopyDataInit>
  ldr  r2, =_sbss
 8001876:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001878:	e002      	b.n	8001880 <LoopFillZerobss>

0800187a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800187a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800187c:	f842 3b04 	str.w	r3, [r2], #4

08001880 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001882:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001884:	d3f9      	bcc.n	800187a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001886:	f7ff f8d1 	bl	8000a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188a:	f000 f811 	bl	80018b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188e:	f7ff f871 	bl	8000974 <main>
  bx  lr    
 8001892:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001894:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001898:	08001968 	.word	0x08001968
  ldr  r0, =_sdata
 800189c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018a0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80018a4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80018a8:	200000b4 	.word	0x200000b4

080018ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC_IRQHandler>
	...

080018b0 <__libc_init_array>:
 80018b0:	b570      	push	{r4, r5, r6, lr}
 80018b2:	4e0d      	ldr	r6, [pc, #52]	; (80018e8 <__libc_init_array+0x38>)
 80018b4:	4c0d      	ldr	r4, [pc, #52]	; (80018ec <__libc_init_array+0x3c>)
 80018b6:	1ba4      	subs	r4, r4, r6
 80018b8:	10a4      	asrs	r4, r4, #2
 80018ba:	2500      	movs	r5, #0
 80018bc:	42a5      	cmp	r5, r4
 80018be:	d109      	bne.n	80018d4 <__libc_init_array+0x24>
 80018c0:	4e0b      	ldr	r6, [pc, #44]	; (80018f0 <__libc_init_array+0x40>)
 80018c2:	4c0c      	ldr	r4, [pc, #48]	; (80018f4 <__libc_init_array+0x44>)
 80018c4:	f000 f818 	bl	80018f8 <_init>
 80018c8:	1ba4      	subs	r4, r4, r6
 80018ca:	10a4      	asrs	r4, r4, #2
 80018cc:	2500      	movs	r5, #0
 80018ce:	42a5      	cmp	r5, r4
 80018d0:	d105      	bne.n	80018de <__libc_init_array+0x2e>
 80018d2:	bd70      	pop	{r4, r5, r6, pc}
 80018d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018d8:	4798      	blx	r3
 80018da:	3501      	adds	r5, #1
 80018dc:	e7ee      	b.n	80018bc <__libc_init_array+0xc>
 80018de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018e2:	4798      	blx	r3
 80018e4:	3501      	adds	r5, #1
 80018e6:	e7f2      	b.n	80018ce <__libc_init_array+0x1e>
 80018e8:	08001960 	.word	0x08001960
 80018ec:	08001960 	.word	0x08001960
 80018f0:	08001960 	.word	0x08001960
 80018f4:	08001964 	.word	0x08001964

080018f8 <_init>:
 80018f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fa:	bf00      	nop
 80018fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018fe:	bc08      	pop	{r3}
 8001900:	469e      	mov	lr, r3
 8001902:	4770      	bx	lr

08001904 <_fini>:
 8001904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001906:	bf00      	nop
 8001908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800190a:	bc08      	pop	{r3}
 800190c:	469e      	mov	lr, r3
 800190e:	4770      	bx	lr
